{"name":"quiver-log","qualifiedName":"quiver_log/quiver-log","comment":"","variables":{"BASIC_LOG_FORMATTER":{"name":"BASIC_LOG_FORMATTER","qualifiedName":"quiver_log/quiver-log.BASIC_LOG_FORMATTER","comment":"<p>Default instance of the BasicLogFormatter</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]}},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{}},"classes":{"class":[{"name":"InMemoryListAppender","qualifiedName":"quiver_log/quiver-log.InMemoryListAppender","preview":"<p>Appends string messages to the messages list. Note that this logger does not\never truncate so only use for diagnostics or short lived applications.</p>"},{"name":"PrintAppender","qualifiedName":"quiver_log/quiver-log.PrintAppender","preview":"<p>Appends string messages to the console using print function</p>"},{"name":"BasicLogFormatter","qualifiedName":"quiver_log/quiver-log.BasicLogFormatter","preview":"<p>Formats log messages using a simple pattern</p>"},{"name":"FormatterBase","qualifiedName":"quiver_log/quiver-log.FormatterBase","preview":"<p>Formatter accepts a <a>quiver_log/logging.LogRecord</a> and returns a T</p>"},{"name":"Appender","qualifiedName":"quiver_log/quiver-log.Appender","preview":"<p>Appenders define output vectors for logging messages. An appender can be\nused with multiple <a>quiver_log/logging.Logger</a>s, but can use only a single <a>quiver_log/quiver-log.Formatter</a>. This\nclass is designed as base class for other Appenders to extend.</p>"}],"typedef":{"Formatter":{"name":"Formatter","qualifiedName":"quiver_log/quiver-log.Formatter","comment":"","return":"quiver-log.Formatter.T","parameters":{"record":{"name":"record","optional":false,"named":false,"default":false,"type":[{"outer":"logging.LogRecord","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{"T":{"name":"T","type":"dart.core.Object"}}}},"error":[]},"packageName":"quiver_log","packageIntro":"<h1>Quiver Log</h1>\n<p>Quiver log is a set of logging utilities that make it easy to configure and\nmanage Dart's built in logging capabilities.</p>\n<h1>Documentation</h1>\n<p>http://google.github.io/quiver-log/</p>\n<h1>The Basics</h1>\n<p>Dart's built-in logging utilities are fairly low level. This means each time you\nstart a new project you have to copy/paste a bunch of logging configuration\ncode to setup output locations and logging formats. Quiver-log provides a set of\nhigher-level abstractions to make it easier to get logging setup correctly.\nSpecifically, there are two new concepts: <code>appender</code> and <code>formatter</code>. Appenders\ndefine output locations like the console, http or even in-memory data structures\nthat can store logs. Formatters, as the name implies, allow for custom logging\nformats.</p>\n<p>Here is a simple example that sets up a <code>InMemoryAppender</code> with a\n<code>SimpleStringFormatter</code>:</p>\n<pre><code>import 'package:logging/logging.dart';\nimport 'package:quiver/log.dart';\n\nmain() {\n  var logger = new Logger('quiver.TestLogger');\n  var appender = new InMemoryListAppender(new SimpleStringFormatter());\n  appender.attachLogger(logger);\n}\n</code></pre>\n<p>That's all there is to it!</p>\n<p>Quiver-log provides two <code>Appender</code>s: <code>PrintAppender</code>\nwhich uses Dart's print statement to write to the console and\n<code>InMemoryListAppender</code> which writes logs to a simple list (this can be useful for debugging or testing). Additionally, a single <code>Formatter</code> called\n<code>BasicLogFormatter</code> is included and uses a \"MMyy HH:mm:ss.S\" format. Of course\nthere is no limit to what kind of appenders you can create, we have plans to\nadd appenders HTTP, WebSocket, DOM, Isolate and SysOut.</p>\n<p>To create a new kind of <code>Appender</code> simply extends <code>Appender</code>. To create a new\n<code>Formatter</code> just implement the <code>Formatter</code> typedef or <code>FormatterBase</code> class if\nyou need to hold state in your formtatter. Take a look at PrintAppender and BasicLogFormatter for an example.</p>"}