{"libraries":[{"name":"dart-core","qualifiedName":"dart-core","preview":"<p>Built-in types, collections,\nand other core functionality for every Dart program.</p>","packageName":""},{"name":"quiver-log","qualifiedName":"quiver-log/quiver-log","packageName":"quiver-log","packageIntro":"<h1>Quiver Log</h1>\n<p>Quiver log is a set of logging utilities that make it easy to configure and\nmanage Dart's built in logging capabilities.</p>\n<h1>Documentation</h1>\n<p>http://google.github.io/quiver-log/docs/</p>\n<h1>The Basics</h1>\n<p>Dart's built-in logging utilities are fairly low level. This means each time you\nstart a new project you have to copy/paste a bunch of logging configuration\ncode to setup output locations and logging formats. Quiver-log provides a set of\nhigher-level abstractions to make it easier to get logging setup correctly.\nSpecifically, there are two new concepts: <code>appender</code> and <code>formatter</code>. Appenders\ndefine output locations like the console, http or even in-memory data structures\nthat can store logs. Formatters, as the name implies, allow for custom logging\nformats.</p>\n<p>Here is a simple example that sets up a <code>InMemoryAppender</code> with a\n<code>SimpleStringFormatter</code>:</p>\n<pre><code>import 'package:logging/logging.dart';\nimport 'package:quiver/log.dart';\n\nmain() {\n  var logger = new Logger('quiver.TestLogger');\n  var appender = new InMemoryListAppender(new SimpleStringFormatter());\n  appender.attachLogger(logger);\n}\n</code></pre>\n<p>That's all there is to it!</p>\n<p>Quiver-log provides two <code>Appender</code>s: <code>PrintAppender</code>\nwhich uses Dart's print statement to write to the console and\n<code>InMemoryListAppender</code> which writes logs to a simple list (this can be useful for debugging or testing). Additionally, a single <code>Formatter</code> called\n<code>BasicLogFormatter</code> is included and uses a \"MMyy HH:mm:ss.S\" format. Of course\nthere is no limit to what kind of appenders you can create, we have plans to\nadd appenders HTTP, WebSocket, DOM, Isolate and SysOut.</p>\n<p>To create a new kind of <code>Appender</code> simply extends <code>Appender</code>. To create a new\n<code>Formatter</code> just implement the <code>Formatter</code> typedef or <code>FormatterBase</code> class if\nyou need to hold state in your formtatter. Take a look at PrintAppender and BasicLogFormatter for an example.</p>"},{"name":"options","qualifiedName":"analyzer/options","packageName":"analyzer","packageIntro":"<p>This code is part of an experimental port of the Editor's analysis engine from\nJava to Dart. While we will continue to support the Java version of the analysis\nengine and the services built on it, we also intend to provide the same services\nto Dart-based applications. This is very early code and we expect it to change,\npossibly in significant ways. While we are eager to see other people make use\nof the analysis engine, we also want to be clear, in case you are interested in\ndoing so, that the current API's should in no way be considered to be stable.</p>\n<p>In particular, this code was automatically translated from the Java\nimplementation. The Java implementation that was translated is still under\ndevelopment and will continue to change over time. The translator that was used\nis still under development and the output produced by the translator will change\nover time. Therefore, the API presented by this code will change. In addition,\nany edits made to this code will be overwritten the next time we re-generate\nthis code.</p>\n<p>If you are interested in using this code, despite the disclaimer above,\nfantastic! Please let the editor team know so that we can get a sense of the\ninterest in it. Also, feel free to ask questions and make requests for\nadditional functionality.</p>"},{"name":"formatter","qualifiedName":"analyzer/formatter","packageName":"analyzer","packageIntro":"<p>This code is part of an experimental port of the Editor's analysis engine from\nJava to Dart. While we will continue to support the Java version of the analysis\nengine and the services built on it, we also intend to provide the same services\nto Dart-based applications. This is very early code and we expect it to change,\npossibly in significant ways. While we are eager to see other people make use\nof the analysis engine, we also want to be clear, in case you are interested in\ndoing so, that the current API's should in no way be considered to be stable.</p>\n<p>In particular, this code was automatically translated from the Java\nimplementation. The Java implementation that was translated is still under\ndevelopment and will continue to change over time. The translator that was used\nis still under development and the output produced by the translator will change\nover time. Therefore, the API presented by this code will change. In addition,\nany edits made to this code will be overwritten the next time we re-generate\nthis code.</p>\n<p>If you are interested in using this code, despite the disclaimer above,\nfantastic! Please let the editor team know so that we can get a sense of the\ninterest in it. Also, feel free to ask questions and make requests for\nadditional functionality.</p>"},{"name":"analyzer","qualifiedName":"analyzer/analyzer","packageName":"analyzer","packageIntro":"<p>This code is part of an experimental port of the Editor's analysis engine from\nJava to Dart. While we will continue to support the Java version of the analysis\nengine and the services built on it, we also intend to provide the same services\nto Dart-based applications. This is very early code and we expect it to change,\npossibly in significant ways. While we are eager to see other people make use\nof the analysis engine, we also want to be clear, in case you are interested in\ndoing so, that the current API's should in no way be considered to be stable.</p>\n<p>In particular, this code was automatically translated from the Java\nimplementation. The Java implementation that was translated is still under\ndevelopment and will continue to change over time. The translator that was used\nis still under development and the output produced by the translator will change\nover time. Therefore, the API presented by this code will change. In addition,\nany edits made to this code will be overwritten the next time we re-generate\nthis code.</p>\n<p>If you are interested in using this code, despite the disclaimer above,\nfantastic! Please let the editor team know so that we can get a sense of the\ninterest in it. Also, feel free to ask questions and make requests for\nadditional functionality.</p>"},{"name":"args","qualifiedName":"args/args","preview":"<p>Parser support for transforming raw command-line arguments into a set\nof options and values.</p>","packageName":"args","packageIntro":""},{"name":"dart-pkg-collection-algorithms","qualifiedName":"collection/dart-pkg-collection-algorithms","preview":"<p>Operations on collections.</p>","packageName":"collection","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"},{"name":"dart-pkg-collection-equality","qualifiedName":"collection/dart-pkg-collection-equality","preview":"<p>Defines equality relations on collections.</p>","packageName":"collection","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"},{"name":"dart-pkg-collection-priority_queue","qualifiedName":"collection/dart-pkg-collection-priority_queue","packageName":"collection","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"},{"name":"dart-pkg-collection","qualifiedName":"collection/dart-pkg-collection","preview":"<p>Exports all the individual parts of the collection-helper library.</p>","packageName":"collection","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"},{"name":"dart-pkg-collection-wrappers","qualifiedName":"collection/dart-pkg-collection-wrappers","preview":"<p>Delegating wrappers for <a>dart-core.Iterable</a>, <a>dart-core.List</a>, <a>dart-core.Set</a>, <a>collection/dart-pkg-collection-wrappers.Queue</a> and <a>dart-core.Map</a>.</p>","packageName":"collection","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"},{"name":"dart-pkg-collection-iterable_zip","qualifiedName":"collection/dart-pkg-collection-iterable_zip","preview":"<p>Zipping multiple iterables into one iterable of tuples of values.</p>","packageName":"collection","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"},{"name":"intl_standalone","qualifiedName":"intl/intl_standalone","preview":"<p>This provides facilities for Internationalization that are only available\nwhen running standalone. You should import only one of this or\nintl_browser.dart. Right now the only thing provided here is finding\nthe operating system locale.</p>","packageName":"intl","packageIntro":"<h1>Intl</h1>\n<p>This package provides internationalization and localization facilities,\nincluding message translation, plurals and genders, date/number formatting\nand parsing, and bidirectional text.</p>\n<h2>General</h2>\n<p>The most important library is <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl.html\">intl</a>. It defines the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html\">Intl</a>\nclass, with the default locale and methods for accessing most of the\ninternationalization mechanisms. This library also defines the\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>, <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/NumberFormat.html\">NumberFormat</a>, and\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html\">BidiFormatter</a> classes.</p>\n<h2>Current locale</h2>\n<p>The package has a single current locale, called <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#defaultLocale\">defaultLocale</a>.\nOperations will use that locale unless told to do otherwise.</p>\n<p>To set the global locale, you can explicitly set it, e.g.</p>\n<pre><code>  Intl.defaultLocale = 'pt_BR';\n</code></pre>\n<p>or get it from the browser by</p>\n<pre><code>  import \"package:intl/intl_browser.dart\";\n  ...\n  findSystemLocale().then(runTheRestOfMyProgram);\n</code></pre>\n<p>To temporarily override the current locale, pass the operation\nto <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#withLocale\">withLocale</a>.</p>\n<pre><code>  Intl.withLocale('fr', () =&gt; print(myLocalizedMessage());\n</code></pre>\n<p>To override it for a very specific operation you can create a format object in\na specific locale, or pass in the locale as a parameter to methods.</p>\n<pre><code>  var format = new DateFormat.yMd(\"ar\");\n  var dateString = format.format(new DateTime.now());\n  print(myMessage(dateString, locale: 'ar');\n</code></pre>\n<h2>Initialization</h2>\n<p>All the different types of locale data require an async initialization step\nto make\nsure the data is available. This reduces the size of the application by only\nloading the\ndata that is actually required. However, deferred loading does not yet work for\nmultiple\nlibraries, so currently all the code will be included anyay, increasing the code\nsize in the short term.</p>\n<p>Each different area of internationalization (messages, dates, numbers) requires\na separate initialization process. That way, if the application only needs to\nformat dates, it doesn't need to take the time or space to load up messages,\nnumbers, or other things it may not need.</p>\n<p>With messages, there is also a need to import a file that won't exist until\nthe code generation step has been run. This can be awkward, but can be worked\naround by creating a stub <code>messages_all.dart</code> file, running an empty translation\nstep, or commenting out the import until translations are available.\nSee \"Extracting and Using Translated Messages\"</p>\n<h2>Messages</h2>\n<p>Messages to be localized are written as functions that return the result of\nan <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> call.</p>\n<pre><code>  String continueMessage() =&gt; Intl.message(\n      \"Hit any key to continue\",\n      name: \"continueMessage\",\n      args: [],\n      desc: \"Explains that we will not proceed further until \"\n          \"the user presses a key\");\n  print(continueMessage());\n</code></pre>\n<p>This provides, in addition to the basic message string, a name, a\ndescription for translators, the arguments used in the message, and\nexamples. The <code>name</code> and <code>args</code> parameters are required, and must\nmatch the name and arguments list of the function.  In the future we\nhope to have these provided automatically.</p>\n<p>This can be run in the program before any translation has been done,\nand will just return the message string. It can also be extracted to a\nfile and then be made to return a translated version without modifying\nthe original program. See \"Extracting Messages\" below for more\ndetails.</p>\n<p>The purpose of wrapping the message in a function is to allow it to\nhave parameters which can be used in the result. The message string is\nallowed to use a restricted form of Dart string interpolation, where\nonly the function's parameters can be used, and only in simple\nexpressions. Local variables cannot be used, and neither can\nexpressions with curly braces. Only the message string can have\ninterpolation. The name, desc, args, and examples must be literals and\nnot contain interpolations. Only the args parameter can refer to\nvariables, and it should list exactly the function parameters. If you\nare passing numbers or dates and you want them formatted, you must do\nthe formatting outside the function and pass the formatted string into\nthe message.</p>\n<pre><code>  greetingMessage(name) =&gt; Intl.message(\n      \"Hello $name!\",\n      name: \"greetingMessage\",\n      args: [name],\n      desc: \"Greet the user as they first open the application\",\n      examples: {'name': \"Emily\"});\n  print(greetingMessage('Dan'));\n</code></pre>\n<p>There is one special class of complex expressions allowed in the\nmessage string, for plurals and genders.</p>\n<pre><code>  remainingEmailsMessage(int howMany, String userName) =&gt; \n    Intl.message(\n      \"${Intl.plural(howMany,\n          zero: 'There are no emails left for $userName.',\n          one: 'There is one email left for $userName.',\n          other: 'There are $howMany emails left for $userName.')}\",\n    name: \"remainingEmailsMessage\",\n    args: [howMany, userName],\n    desc: \"How many emails remain after archiving.\",\n    examples: {'number': 42, 'userName': 'Fred'});\n\n  print(remainingEmailsMessage(1, \"Fred\"));\n</code></pre>\n<p>However, since the typical usage for a plural or gender is for it to\nbe at the top-level, we can also omit the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> call and\nprovide its parameters to the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#plural\">Intl.plural</a> call instead.</p>\n<pre><code>  remainingEmailsMessage(int howMany, String userName) =&gt; \n    Intl.plural(\n      howMany,\n      zero: 'There are no emails left for $userName.',\n      one: 'There is one email left for $userName.',\n      other: 'There are $howMany emails left for $userName.'),\n      name: \"remainingEmailsMessage\",\n      args: [howMany, userName],\n      desc: \"How many emails remain after archiving.\",\n      examples: {'number': 42, 'userName': 'Fred'});\n</code></pre>\n<p>Similarly, there is an <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#gender\">Intl.gender</a> message, and plurals\nand genders can be nested.</p>\n<pre><code>  notOnlineMessage(String userName, String userGender) =&gt; \n    Intl.gender(\n      userGender,\n      male: '$userName is unavailable because he is not online.',\n      female: '$userName is unavailable because she is not online.',\n      other: '$userName is unavailable because they are not online'),\n      name: \"notOnlineMessage\",\n      args: [userName, userGender],\n      desc: \"The user is not available to hangout.\",\n      examples: {{'userGender': 'male', 'userName': 'Fred'},\n          {'userGender': 'female', 'userName' : 'Alice'}});\n</code></pre>\n<h2>Extracting And Using Translated Messages</h2>\n<p>When your program contains messages that need translation, these must\nbe extracted from the program source, sent to human translators, and the\nresults need to be incorporated. This is still work in progress, and\nthe extraction is done to a custom JSON format that is not supported\nby translation tools. We intend to support one or more actual\ntranslation file formats.</p>\n<p>To extract messages, run the <code>pkg/intl/test/extract_to_json.dart</code> program.</p>\n<pre><code>  dart extract_to_json.dart --output-dir=target/directory\n      my_program.dart more_of_my_program.dart\n</code></pre>\n<p>This will produce a file <code>intl_messages.json</code> with the messages from\nall of these programs. This is in a simple JSON format with a map from\nmessage names to message strings.</p>\n<p>The reverse step expects to receive a series of files, one per\nlocale. These consist of a map with the entry for \"_locale\" indicating\nthe locale, and with the function name mapped to the translated\nstring. However, plurals and genders are currently represented in an\nopaque form, by serializing the internal objects that represent\nthem. You can see the generation of this code in the\n<code>make_hardcoded_translation.dart</code> test file.</p>\n<p>If you manage to create such a set of input files, then you can run</p>\n<pre><code>  dart generate_from_json.dart --generated_file_prefix=&lt;prefix&gt; \n      &lt;my dart files&gt; &lt;translated json files&gt;\n</code></pre>\n<p>This will generate Dart libraries, one per locale, which contain the\ntranslated versions. Your Dart libraries can import the primary file,\nnamed <code>&lt;prefix&gt;messages_all.dart</code>, and then call the initialization\nfor a specific locale. Once that's done, any\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> calls made in the context of that locale\nwill automatically print the translated version instead of the\noriginal.</p>\n<pre><code>  import \"my_prefix_messages_all.dart\";\n  ...\n  initializeMessages(\"dk\").then(printSomeMessages);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nmessage data is available.</p>\n<h2>Number Formatting and Parsing</h2>\n<p>To format a number, create a NumberFormat instance.</p>\n<pre><code>  var f = new NumberFormat(\"###.0#\", \"en_US\");\n  print(f.format(12.345));\n    ==&gt; 12.34\n</code></pre>\n<p>The locale parameter is optional. If omitted, then it will use the\ncurrent locale. The format string is as described in\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/NumberFormat.html\">NumberFormat</a></p>\n<p>It's also possible to access the number symbol data for the current\nlocale, which provides information as to the various separator\ncharacters, patterns, and other information used for formatting, as</p>\n<pre><code>  f.symbols\n</code></pre>\n<p>Current known limitations are that the currency format will only print\nthe name of the currency, and does not support currency symbols, and\nthat the scientific format does not really agree with scientific\nnotation. Number parsing is not yet implemented.</p>\n<p>Note that before doing any number formatting for a particular locale\nyou must load the appropriate data by calling</p>\n<pre><code>  import 'package:intl/number_symbols_data_local.dart';\n  ...\n  initializeNumberFormatting(localeName, null).then(formatNumbers);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nformatting data is available. Note that right now this includes all\nthe data for a locales. We expect to make this use deferred loading to\nreduce code size.</p>\n<h2>Date Formatting and Parsing</h2>\n<p>To format a <a href=\"https://api.dartlang.org/docs/channels/stable/latest/dart_core/DateTime.html\">DateTime</a>, create a <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>\ninstance. These can be created using a set of commonly used skeletons\ntaken from ICU/CLDR or using an explicit pattern. For details on the\nsupported skeletons and patterns see <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>.</p>\n<pre><code>  new DateFormat.yMMMMEEEEd().format(aDateTime);\n    ==&gt; 'Wednesday, January 10, 2012'\n  new DateFormat(\"EEEEE\", \"en_US\").format(aDateTime);\n    ==&gt; 'Wednesday'\n  new DateFormat(\"EEEEE\", \"ln\").format(aDateTime);\n    ==&gt; 'mokɔlɔ mwa mísáto'\n</code></pre>\n<p>You can also parse dates using the same skeletons or patterns.</p>\n<pre><code>    new DateFormat.yMd(\"en_US\").parse(\"1/10/2012\");\n    new DateFormat(\"Hms\", \"en_US\").parse('14:23:01');\n</code></pre>\n<p>Skeletons can be combined, the main use being to print a full date and\ntime, e.g.</p>\n<pre><code>    new DateFormat.yMEd().add_jms().format(new DateTime.now());\n      ==&gt; 'Thu, 5/23/2013 10:21:47 AM'\n</code></pre>\n<p>Known limitations: Time zones are not yet supported. Dart\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/dart_core/DateTime.html\">DateTime</a> objects don't have a time zone, so are either\nlocal or UTC. Formatting and parsing Durations is not yet implemented.</p>\n<p>Note that before doing any DateTime formatting for a particular\nlocale, you must load the appropriate data by calling.</p>\n<pre><code>    import 'package:intl/date_symbol_data_local.dart';\n    ...\n    initializeDateFormatting(\"de_DE\", null).then(formatDates);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nformatting data is available.</p>\n<p>There are other mechanisms for loading the date formatting data\nimplemented, but we expect to deprecate those in favor of having the\ndata in a library as in the above, and using deferred loading to only\nload the portions that are needed. For the time being, this will\ninclude all of the data, which will increase code size.</p>\n<h2>Bidirectional Text</h2>\n<p>The class <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html\">BidiFormatter</a> provides utilities for\nworking with Bidirectional text. We can wrap the string with unicode\ndirectional indicator characters or with an HTML span to indicate\ndirection. The direction can be specified with the\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html#RTL\">RTL</a> and <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html#LTR\">LTR</a> constructors, or\ndetected from the text.</p>\n<pre><code>    new BidiFormatter.RTL().wrapWithUnicode('xyz');\n    new BidiFormatter.RTL().wrapWithSpan('xyz');\n</code></pre>"},{"name":"number_symbol_data","qualifiedName":"intl/number_symbol_data","preview":"<p>Date/time formatting symbols for all locales.</p>","packageName":"intl","packageIntro":"<h1>Intl</h1>\n<p>This package provides internationalization and localization facilities,\nincluding message translation, plurals and genders, date/number formatting\nand parsing, and bidirectional text.</p>\n<h2>General</h2>\n<p>The most important library is <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl.html\">intl</a>. It defines the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html\">Intl</a>\nclass, with the default locale and methods for accessing most of the\ninternationalization mechanisms. This library also defines the\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>, <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/NumberFormat.html\">NumberFormat</a>, and\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html\">BidiFormatter</a> classes.</p>\n<h2>Current locale</h2>\n<p>The package has a single current locale, called <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#defaultLocale\">defaultLocale</a>.\nOperations will use that locale unless told to do otherwise.</p>\n<p>To set the global locale, you can explicitly set it, e.g.</p>\n<pre><code>  Intl.defaultLocale = 'pt_BR';\n</code></pre>\n<p>or get it from the browser by</p>\n<pre><code>  import \"package:intl/intl_browser.dart\";\n  ...\n  findSystemLocale().then(runTheRestOfMyProgram);\n</code></pre>\n<p>To temporarily override the current locale, pass the operation\nto <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#withLocale\">withLocale</a>.</p>\n<pre><code>  Intl.withLocale('fr', () =&gt; print(myLocalizedMessage());\n</code></pre>\n<p>To override it for a very specific operation you can create a format object in\na specific locale, or pass in the locale as a parameter to methods.</p>\n<pre><code>  var format = new DateFormat.yMd(\"ar\");\n  var dateString = format.format(new DateTime.now());\n  print(myMessage(dateString, locale: 'ar');\n</code></pre>\n<h2>Initialization</h2>\n<p>All the different types of locale data require an async initialization step\nto make\nsure the data is available. This reduces the size of the application by only\nloading the\ndata that is actually required. However, deferred loading does not yet work for\nmultiple\nlibraries, so currently all the code will be included anyay, increasing the code\nsize in the short term.</p>\n<p>Each different area of internationalization (messages, dates, numbers) requires\na separate initialization process. That way, if the application only needs to\nformat dates, it doesn't need to take the time or space to load up messages,\nnumbers, or other things it may not need.</p>\n<p>With messages, there is also a need to import a file that won't exist until\nthe code generation step has been run. This can be awkward, but can be worked\naround by creating a stub <code>messages_all.dart</code> file, running an empty translation\nstep, or commenting out the import until translations are available.\nSee \"Extracting and Using Translated Messages\"</p>\n<h2>Messages</h2>\n<p>Messages to be localized are written as functions that return the result of\nan <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> call.</p>\n<pre><code>  String continueMessage() =&gt; Intl.message(\n      \"Hit any key to continue\",\n      name: \"continueMessage\",\n      args: [],\n      desc: \"Explains that we will not proceed further until \"\n          \"the user presses a key\");\n  print(continueMessage());\n</code></pre>\n<p>This provides, in addition to the basic message string, a name, a\ndescription for translators, the arguments used in the message, and\nexamples. The <code>name</code> and <code>args</code> parameters are required, and must\nmatch the name and arguments list of the function.  In the future we\nhope to have these provided automatically.</p>\n<p>This can be run in the program before any translation has been done,\nand will just return the message string. It can also be extracted to a\nfile and then be made to return a translated version without modifying\nthe original program. See \"Extracting Messages\" below for more\ndetails.</p>\n<p>The purpose of wrapping the message in a function is to allow it to\nhave parameters which can be used in the result. The message string is\nallowed to use a restricted form of Dart string interpolation, where\nonly the function's parameters can be used, and only in simple\nexpressions. Local variables cannot be used, and neither can\nexpressions with curly braces. Only the message string can have\ninterpolation. The name, desc, args, and examples must be literals and\nnot contain interpolations. Only the args parameter can refer to\nvariables, and it should list exactly the function parameters. If you\nare passing numbers or dates and you want them formatted, you must do\nthe formatting outside the function and pass the formatted string into\nthe message.</p>\n<pre><code>  greetingMessage(name) =&gt; Intl.message(\n      \"Hello $name!\",\n      name: \"greetingMessage\",\n      args: [name],\n      desc: \"Greet the user as they first open the application\",\n      examples: {'name': \"Emily\"});\n  print(greetingMessage('Dan'));\n</code></pre>\n<p>There is one special class of complex expressions allowed in the\nmessage string, for plurals and genders.</p>\n<pre><code>  remainingEmailsMessage(int howMany, String userName) =&gt; \n    Intl.message(\n      \"${Intl.plural(howMany,\n          zero: 'There are no emails left for $userName.',\n          one: 'There is one email left for $userName.',\n          other: 'There are $howMany emails left for $userName.')}\",\n    name: \"remainingEmailsMessage\",\n    args: [howMany, userName],\n    desc: \"How many emails remain after archiving.\",\n    examples: {'number': 42, 'userName': 'Fred'});\n\n  print(remainingEmailsMessage(1, \"Fred\"));\n</code></pre>\n<p>However, since the typical usage for a plural or gender is for it to\nbe at the top-level, we can also omit the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> call and\nprovide its parameters to the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#plural\">Intl.plural</a> call instead.</p>\n<pre><code>  remainingEmailsMessage(int howMany, String userName) =&gt; \n    Intl.plural(\n      howMany,\n      zero: 'There are no emails left for $userName.',\n      one: 'There is one email left for $userName.',\n      other: 'There are $howMany emails left for $userName.'),\n      name: \"remainingEmailsMessage\",\n      args: [howMany, userName],\n      desc: \"How many emails remain after archiving.\",\n      examples: {'number': 42, 'userName': 'Fred'});\n</code></pre>\n<p>Similarly, there is an <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#gender\">Intl.gender</a> message, and plurals\nand genders can be nested.</p>\n<pre><code>  notOnlineMessage(String userName, String userGender) =&gt; \n    Intl.gender(\n      userGender,\n      male: '$userName is unavailable because he is not online.',\n      female: '$userName is unavailable because she is not online.',\n      other: '$userName is unavailable because they are not online'),\n      name: \"notOnlineMessage\",\n      args: [userName, userGender],\n      desc: \"The user is not available to hangout.\",\n      examples: {{'userGender': 'male', 'userName': 'Fred'},\n          {'userGender': 'female', 'userName' : 'Alice'}});\n</code></pre>\n<h2>Extracting And Using Translated Messages</h2>\n<p>When your program contains messages that need translation, these must\nbe extracted from the program source, sent to human translators, and the\nresults need to be incorporated. This is still work in progress, and\nthe extraction is done to a custom JSON format that is not supported\nby translation tools. We intend to support one or more actual\ntranslation file formats.</p>\n<p>To extract messages, run the <code>pkg/intl/test/extract_to_json.dart</code> program.</p>\n<pre><code>  dart extract_to_json.dart --output-dir=target/directory\n      my_program.dart more_of_my_program.dart\n</code></pre>\n<p>This will produce a file <code>intl_messages.json</code> with the messages from\nall of these programs. This is in a simple JSON format with a map from\nmessage names to message strings.</p>\n<p>The reverse step expects to receive a series of files, one per\nlocale. These consist of a map with the entry for \"_locale\" indicating\nthe locale, and with the function name mapped to the translated\nstring. However, plurals and genders are currently represented in an\nopaque form, by serializing the internal objects that represent\nthem. You can see the generation of this code in the\n<code>make_hardcoded_translation.dart</code> test file.</p>\n<p>If you manage to create such a set of input files, then you can run</p>\n<pre><code>  dart generate_from_json.dart --generated_file_prefix=&lt;prefix&gt; \n      &lt;my dart files&gt; &lt;translated json files&gt;\n</code></pre>\n<p>This will generate Dart libraries, one per locale, which contain the\ntranslated versions. Your Dart libraries can import the primary file,\nnamed <code>&lt;prefix&gt;messages_all.dart</code>, and then call the initialization\nfor a specific locale. Once that's done, any\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> calls made in the context of that locale\nwill automatically print the translated version instead of the\noriginal.</p>\n<pre><code>  import \"my_prefix_messages_all.dart\";\n  ...\n  initializeMessages(\"dk\").then(printSomeMessages);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nmessage data is available.</p>\n<h2>Number Formatting and Parsing</h2>\n<p>To format a number, create a NumberFormat instance.</p>\n<pre><code>  var f = new NumberFormat(\"###.0#\", \"en_US\");\n  print(f.format(12.345));\n    ==&gt; 12.34\n</code></pre>\n<p>The locale parameter is optional. If omitted, then it will use the\ncurrent locale. The format string is as described in\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/NumberFormat.html\">NumberFormat</a></p>\n<p>It's also possible to access the number symbol data for the current\nlocale, which provides information as to the various separator\ncharacters, patterns, and other information used for formatting, as</p>\n<pre><code>  f.symbols\n</code></pre>\n<p>Current known limitations are that the currency format will only print\nthe name of the currency, and does not support currency symbols, and\nthat the scientific format does not really agree with scientific\nnotation. Number parsing is not yet implemented.</p>\n<p>Note that before doing any number formatting for a particular locale\nyou must load the appropriate data by calling</p>\n<pre><code>  import 'package:intl/number_symbols_data_local.dart';\n  ...\n  initializeNumberFormatting(localeName, null).then(formatNumbers);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nformatting data is available. Note that right now this includes all\nthe data for a locales. We expect to make this use deferred loading to\nreduce code size.</p>\n<h2>Date Formatting and Parsing</h2>\n<p>To format a <a href=\"https://api.dartlang.org/docs/channels/stable/latest/dart_core/DateTime.html\">DateTime</a>, create a <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>\ninstance. These can be created using a set of commonly used skeletons\ntaken from ICU/CLDR or using an explicit pattern. For details on the\nsupported skeletons and patterns see <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>.</p>\n<pre><code>  new DateFormat.yMMMMEEEEd().format(aDateTime);\n    ==&gt; 'Wednesday, January 10, 2012'\n  new DateFormat(\"EEEEE\", \"en_US\").format(aDateTime);\n    ==&gt; 'Wednesday'\n  new DateFormat(\"EEEEE\", \"ln\").format(aDateTime);\n    ==&gt; 'mokɔlɔ mwa mísáto'\n</code></pre>\n<p>You can also parse dates using the same skeletons or patterns.</p>\n<pre><code>    new DateFormat.yMd(\"en_US\").parse(\"1/10/2012\");\n    new DateFormat(\"Hms\", \"en_US\").parse('14:23:01');\n</code></pre>\n<p>Skeletons can be combined, the main use being to print a full date and\ntime, e.g.</p>\n<pre><code>    new DateFormat.yMEd().add_jms().format(new DateTime.now());\n      ==&gt; 'Thu, 5/23/2013 10:21:47 AM'\n</code></pre>\n<p>Known limitations: Time zones are not yet supported. Dart\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/dart_core/DateTime.html\">DateTime</a> objects don't have a time zone, so are either\nlocal or UTC. Formatting and parsing Durations is not yet implemented.</p>\n<p>Note that before doing any DateTime formatting for a particular\nlocale, you must load the appropriate data by calling.</p>\n<pre><code>    import 'package:intl/date_symbol_data_local.dart';\n    ...\n    initializeDateFormatting(\"de_DE\", null).then(formatDates);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nformatting data is available.</p>\n<p>There are other mechanisms for loading the date formatting data\nimplemented, but we expect to deprecate those in favor of having the\ndata in a library as in the above, and using deferred loading to only\nload the portions that are needed. For the time being, this will\ninclude all of the data, which will increase code size.</p>\n<h2>Bidirectional Text</h2>\n<p>The class <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html\">BidiFormatter</a> provides utilities for\nworking with Bidirectional text. We can wrap the string with unicode\ndirectional indicator characters or with an HTML span to indicate\ndirection. The direction can be specified with the\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html#RTL\">RTL</a> and <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html#LTR\">LTR</a> constructors, or\ndetected from the text.</p>\n<pre><code>    new BidiFormatter.RTL().wrapWithUnicode('xyz');\n    new BidiFormatter.RTL().wrapWithSpan('xyz');\n</code></pre>"},{"name":"date_symbol_data_json","qualifiedName":"intl/date_symbol_data_json","preview":"<p>This file should be imported, along with date_format.dart in order to read\nlocale data via http requests to a web server..</p>","packageName":"intl","packageIntro":"<h1>Intl</h1>\n<p>This package provides internationalization and localization facilities,\nincluding message translation, plurals and genders, date/number formatting\nand parsing, and bidirectional text.</p>\n<h2>General</h2>\n<p>The most important library is <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl.html\">intl</a>. It defines the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html\">Intl</a>\nclass, with the default locale and methods for accessing most of the\ninternationalization mechanisms. This library also defines the\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>, <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/NumberFormat.html\">NumberFormat</a>, and\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html\">BidiFormatter</a> classes.</p>\n<h2>Current locale</h2>\n<p>The package has a single current locale, called <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#defaultLocale\">defaultLocale</a>.\nOperations will use that locale unless told to do otherwise.</p>\n<p>To set the global locale, you can explicitly set it, e.g.</p>\n<pre><code>  Intl.defaultLocale = 'pt_BR';\n</code></pre>\n<p>or get it from the browser by</p>\n<pre><code>  import \"package:intl/intl_browser.dart\";\n  ...\n  findSystemLocale().then(runTheRestOfMyProgram);\n</code></pre>\n<p>To temporarily override the current locale, pass the operation\nto <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#withLocale\">withLocale</a>.</p>\n<pre><code>  Intl.withLocale('fr', () =&gt; print(myLocalizedMessage());\n</code></pre>\n<p>To override it for a very specific operation you can create a format object in\na specific locale, or pass in the locale as a parameter to methods.</p>\n<pre><code>  var format = new DateFormat.yMd(\"ar\");\n  var dateString = format.format(new DateTime.now());\n  print(myMessage(dateString, locale: 'ar');\n</code></pre>\n<h2>Initialization</h2>\n<p>All the different types of locale data require an async initialization step\nto make\nsure the data is available. This reduces the size of the application by only\nloading the\ndata that is actually required. However, deferred loading does not yet work for\nmultiple\nlibraries, so currently all the code will be included anyay, increasing the code\nsize in the short term.</p>\n<p>Each different area of internationalization (messages, dates, numbers) requires\na separate initialization process. That way, if the application only needs to\nformat dates, it doesn't need to take the time or space to load up messages,\nnumbers, or other things it may not need.</p>\n<p>With messages, there is also a need to import a file that won't exist until\nthe code generation step has been run. This can be awkward, but can be worked\naround by creating a stub <code>messages_all.dart</code> file, running an empty translation\nstep, or commenting out the import until translations are available.\nSee \"Extracting and Using Translated Messages\"</p>\n<h2>Messages</h2>\n<p>Messages to be localized are written as functions that return the result of\nan <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> call.</p>\n<pre><code>  String continueMessage() =&gt; Intl.message(\n      \"Hit any key to continue\",\n      name: \"continueMessage\",\n      args: [],\n      desc: \"Explains that we will not proceed further until \"\n          \"the user presses a key\");\n  print(continueMessage());\n</code></pre>\n<p>This provides, in addition to the basic message string, a name, a\ndescription for translators, the arguments used in the message, and\nexamples. The <code>name</code> and <code>args</code> parameters are required, and must\nmatch the name and arguments list of the function.  In the future we\nhope to have these provided automatically.</p>\n<p>This can be run in the program before any translation has been done,\nand will just return the message string. It can also be extracted to a\nfile and then be made to return a translated version without modifying\nthe original program. See \"Extracting Messages\" below for more\ndetails.</p>\n<p>The purpose of wrapping the message in a function is to allow it to\nhave parameters which can be used in the result. The message string is\nallowed to use a restricted form of Dart string interpolation, where\nonly the function's parameters can be used, and only in simple\nexpressions. Local variables cannot be used, and neither can\nexpressions with curly braces. Only the message string can have\ninterpolation. The name, desc, args, and examples must be literals and\nnot contain interpolations. Only the args parameter can refer to\nvariables, and it should list exactly the function parameters. If you\nare passing numbers or dates and you want them formatted, you must do\nthe formatting outside the function and pass the formatted string into\nthe message.</p>\n<pre><code>  greetingMessage(name) =&gt; Intl.message(\n      \"Hello $name!\",\n      name: \"greetingMessage\",\n      args: [name],\n      desc: \"Greet the user as they first open the application\",\n      examples: {'name': \"Emily\"});\n  print(greetingMessage('Dan'));\n</code></pre>\n<p>There is one special class of complex expressions allowed in the\nmessage string, for plurals and genders.</p>\n<pre><code>  remainingEmailsMessage(int howMany, String userName) =&gt; \n    Intl.message(\n      \"${Intl.plural(howMany,\n          zero: 'There are no emails left for $userName.',\n          one: 'There is one email left for $userName.',\n          other: 'There are $howMany emails left for $userName.')}\",\n    name: \"remainingEmailsMessage\",\n    args: [howMany, userName],\n    desc: \"How many emails remain after archiving.\",\n    examples: {'number': 42, 'userName': 'Fred'});\n\n  print(remainingEmailsMessage(1, \"Fred\"));\n</code></pre>\n<p>However, since the typical usage for a plural or gender is for it to\nbe at the top-level, we can also omit the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> call and\nprovide its parameters to the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#plural\">Intl.plural</a> call instead.</p>\n<pre><code>  remainingEmailsMessage(int howMany, String userName) =&gt; \n    Intl.plural(\n      howMany,\n      zero: 'There are no emails left for $userName.',\n      one: 'There is one email left for $userName.',\n      other: 'There are $howMany emails left for $userName.'),\n      name: \"remainingEmailsMessage\",\n      args: [howMany, userName],\n      desc: \"How many emails remain after archiving.\",\n      examples: {'number': 42, 'userName': 'Fred'});\n</code></pre>\n<p>Similarly, there is an <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#gender\">Intl.gender</a> message, and plurals\nand genders can be nested.</p>\n<pre><code>  notOnlineMessage(String userName, String userGender) =&gt; \n    Intl.gender(\n      userGender,\n      male: '$userName is unavailable because he is not online.',\n      female: '$userName is unavailable because she is not online.',\n      other: '$userName is unavailable because they are not online'),\n      name: \"notOnlineMessage\",\n      args: [userName, userGender],\n      desc: \"The user is not available to hangout.\",\n      examples: {{'userGender': 'male', 'userName': 'Fred'},\n          {'userGender': 'female', 'userName' : 'Alice'}});\n</code></pre>\n<h2>Extracting And Using Translated Messages</h2>\n<p>When your program contains messages that need translation, these must\nbe extracted from the program source, sent to human translators, and the\nresults need to be incorporated. This is still work in progress, and\nthe extraction is done to a custom JSON format that is not supported\nby translation tools. We intend to support one or more actual\ntranslation file formats.</p>\n<p>To extract messages, run the <code>pkg/intl/test/extract_to_json.dart</code> program.</p>\n<pre><code>  dart extract_to_json.dart --output-dir=target/directory\n      my_program.dart more_of_my_program.dart\n</code></pre>\n<p>This will produce a file <code>intl_messages.json</code> with the messages from\nall of these programs. This is in a simple JSON format with a map from\nmessage names to message strings.</p>\n<p>The reverse step expects to receive a series of files, one per\nlocale. These consist of a map with the entry for \"_locale\" indicating\nthe locale, and with the function name mapped to the translated\nstring. However, plurals and genders are currently represented in an\nopaque form, by serializing the internal objects that represent\nthem. You can see the generation of this code in the\n<code>make_hardcoded_translation.dart</code> test file.</p>\n<p>If you manage to create such a set of input files, then you can run</p>\n<pre><code>  dart generate_from_json.dart --generated_file_prefix=&lt;prefix&gt; \n      &lt;my dart files&gt; &lt;translated json files&gt;\n</code></pre>\n<p>This will generate Dart libraries, one per locale, which contain the\ntranslated versions. Your Dart libraries can import the primary file,\nnamed <code>&lt;prefix&gt;messages_all.dart</code>, and then call the initialization\nfor a specific locale. Once that's done, any\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> calls made in the context of that locale\nwill automatically print the translated version instead of the\noriginal.</p>\n<pre><code>  import \"my_prefix_messages_all.dart\";\n  ...\n  initializeMessages(\"dk\").then(printSomeMessages);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nmessage data is available.</p>\n<h2>Number Formatting and Parsing</h2>\n<p>To format a number, create a NumberFormat instance.</p>\n<pre><code>  var f = new NumberFormat(\"###.0#\", \"en_US\");\n  print(f.format(12.345));\n    ==&gt; 12.34\n</code></pre>\n<p>The locale parameter is optional. If omitted, then it will use the\ncurrent locale. The format string is as described in\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/NumberFormat.html\">NumberFormat</a></p>\n<p>It's also possible to access the number symbol data for the current\nlocale, which provides information as to the various separator\ncharacters, patterns, and other information used for formatting, as</p>\n<pre><code>  f.symbols\n</code></pre>\n<p>Current known limitations are that the currency format will only print\nthe name of the currency, and does not support currency symbols, and\nthat the scientific format does not really agree with scientific\nnotation. Number parsing is not yet implemented.</p>\n<p>Note that before doing any number formatting for a particular locale\nyou must load the appropriate data by calling</p>\n<pre><code>  import 'package:intl/number_symbols_data_local.dart';\n  ...\n  initializeNumberFormatting(localeName, null).then(formatNumbers);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nformatting data is available. Note that right now this includes all\nthe data for a locales. We expect to make this use deferred loading to\nreduce code size.</p>\n<h2>Date Formatting and Parsing</h2>\n<p>To format a <a href=\"https://api.dartlang.org/docs/channels/stable/latest/dart_core/DateTime.html\">DateTime</a>, create a <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>\ninstance. These can be created using a set of commonly used skeletons\ntaken from ICU/CLDR or using an explicit pattern. For details on the\nsupported skeletons and patterns see <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>.</p>\n<pre><code>  new DateFormat.yMMMMEEEEd().format(aDateTime);\n    ==&gt; 'Wednesday, January 10, 2012'\n  new DateFormat(\"EEEEE\", \"en_US\").format(aDateTime);\n    ==&gt; 'Wednesday'\n  new DateFormat(\"EEEEE\", \"ln\").format(aDateTime);\n    ==&gt; 'mokɔlɔ mwa mísáto'\n</code></pre>\n<p>You can also parse dates using the same skeletons or patterns.</p>\n<pre><code>    new DateFormat.yMd(\"en_US\").parse(\"1/10/2012\");\n    new DateFormat(\"Hms\", \"en_US\").parse('14:23:01');\n</code></pre>\n<p>Skeletons can be combined, the main use being to print a full date and\ntime, e.g.</p>\n<pre><code>    new DateFormat.yMEd().add_jms().format(new DateTime.now());\n      ==&gt; 'Thu, 5/23/2013 10:21:47 AM'\n</code></pre>\n<p>Known limitations: Time zones are not yet supported. Dart\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/dart_core/DateTime.html\">DateTime</a> objects don't have a time zone, so are either\nlocal or UTC. Formatting and parsing Durations is not yet implemented.</p>\n<p>Note that before doing any DateTime formatting for a particular\nlocale, you must load the appropriate data by calling.</p>\n<pre><code>    import 'package:intl/date_symbol_data_local.dart';\n    ...\n    initializeDateFormatting(\"de_DE\", null).then(formatDates);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nformatting data is available.</p>\n<p>There are other mechanisms for loading the date formatting data\nimplemented, but we expect to deprecate those in favor of having the\ndata in a library as in the above, and using deferred loading to only\nload the portions that are needed. For the time being, this will\ninclude all of the data, which will increase code size.</p>\n<h2>Bidirectional Text</h2>\n<p>The class <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html\">BidiFormatter</a> provides utilities for\nworking with Bidirectional text. We can wrap the string with unicode\ndirectional indicator characters or with an HTML span to indicate\ndirection. The direction can be specified with the\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html#RTL\">RTL</a> and <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html#LTR\">LTR</a> constructors, or\ndetected from the text.</p>\n<pre><code>    new BidiFormatter.RTL().wrapWithUnicode('xyz');\n    new BidiFormatter.RTL().wrapWithSpan('xyz');\n</code></pre>"},{"name":"intl_browser","qualifiedName":"intl/intl_browser","preview":"<p>This provides facilities for Internationalization that are only available\nwhen running in the web browser. You should import only one of this or\nintl_standalone.dart. Right now the only thing provided here is the\nability to find the default locale from the browser.</p>","packageName":"intl","packageIntro":"<h1>Intl</h1>\n<p>This package provides internationalization and localization facilities,\nincluding message translation, plurals and genders, date/number formatting\nand parsing, and bidirectional text.</p>\n<h2>General</h2>\n<p>The most important library is <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl.html\">intl</a>. It defines the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html\">Intl</a>\nclass, with the default locale and methods for accessing most of the\ninternationalization mechanisms. This library also defines the\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>, <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/NumberFormat.html\">NumberFormat</a>, and\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html\">BidiFormatter</a> classes.</p>\n<h2>Current locale</h2>\n<p>The package has a single current locale, called <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#defaultLocale\">defaultLocale</a>.\nOperations will use that locale unless told to do otherwise.</p>\n<p>To set the global locale, you can explicitly set it, e.g.</p>\n<pre><code>  Intl.defaultLocale = 'pt_BR';\n</code></pre>\n<p>or get it from the browser by</p>\n<pre><code>  import \"package:intl/intl_browser.dart\";\n  ...\n  findSystemLocale().then(runTheRestOfMyProgram);\n</code></pre>\n<p>To temporarily override the current locale, pass the operation\nto <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#withLocale\">withLocale</a>.</p>\n<pre><code>  Intl.withLocale('fr', () =&gt; print(myLocalizedMessage());\n</code></pre>\n<p>To override it for a very specific operation you can create a format object in\na specific locale, or pass in the locale as a parameter to methods.</p>\n<pre><code>  var format = new DateFormat.yMd(\"ar\");\n  var dateString = format.format(new DateTime.now());\n  print(myMessage(dateString, locale: 'ar');\n</code></pre>\n<h2>Initialization</h2>\n<p>All the different types of locale data require an async initialization step\nto make\nsure the data is available. This reduces the size of the application by only\nloading the\ndata that is actually required. However, deferred loading does not yet work for\nmultiple\nlibraries, so currently all the code will be included anyay, increasing the code\nsize in the short term.</p>\n<p>Each different area of internationalization (messages, dates, numbers) requires\na separate initialization process. That way, if the application only needs to\nformat dates, it doesn't need to take the time or space to load up messages,\nnumbers, or other things it may not need.</p>\n<p>With messages, there is also a need to import a file that won't exist until\nthe code generation step has been run. This can be awkward, but can be worked\naround by creating a stub <code>messages_all.dart</code> file, running an empty translation\nstep, or commenting out the import until translations are available.\nSee \"Extracting and Using Translated Messages\"</p>\n<h2>Messages</h2>\n<p>Messages to be localized are written as functions that return the result of\nan <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> call.</p>\n<pre><code>  String continueMessage() =&gt; Intl.message(\n      \"Hit any key to continue\",\n      name: \"continueMessage\",\n      args: [],\n      desc: \"Explains that we will not proceed further until \"\n          \"the user presses a key\");\n  print(continueMessage());\n</code></pre>\n<p>This provides, in addition to the basic message string, a name, a\ndescription for translators, the arguments used in the message, and\nexamples. The <code>name</code> and <code>args</code> parameters are required, and must\nmatch the name and arguments list of the function.  In the future we\nhope to have these provided automatically.</p>\n<p>This can be run in the program before any translation has been done,\nand will just return the message string. It can also be extracted to a\nfile and then be made to return a translated version without modifying\nthe original program. See \"Extracting Messages\" below for more\ndetails.</p>\n<p>The purpose of wrapping the message in a function is to allow it to\nhave parameters which can be used in the result. The message string is\nallowed to use a restricted form of Dart string interpolation, where\nonly the function's parameters can be used, and only in simple\nexpressions. Local variables cannot be used, and neither can\nexpressions with curly braces. Only the message string can have\ninterpolation. The name, desc, args, and examples must be literals and\nnot contain interpolations. Only the args parameter can refer to\nvariables, and it should list exactly the function parameters. If you\nare passing numbers or dates and you want them formatted, you must do\nthe formatting outside the function and pass the formatted string into\nthe message.</p>\n<pre><code>  greetingMessage(name) =&gt; Intl.message(\n      \"Hello $name!\",\n      name: \"greetingMessage\",\n      args: [name],\n      desc: \"Greet the user as they first open the application\",\n      examples: {'name': \"Emily\"});\n  print(greetingMessage('Dan'));\n</code></pre>\n<p>There is one special class of complex expressions allowed in the\nmessage string, for plurals and genders.</p>\n<pre><code>  remainingEmailsMessage(int howMany, String userName) =&gt; \n    Intl.message(\n      \"${Intl.plural(howMany,\n          zero: 'There are no emails left for $userName.',\n          one: 'There is one email left for $userName.',\n          other: 'There are $howMany emails left for $userName.')}\",\n    name: \"remainingEmailsMessage\",\n    args: [howMany, userName],\n    desc: \"How many emails remain after archiving.\",\n    examples: {'number': 42, 'userName': 'Fred'});\n\n  print(remainingEmailsMessage(1, \"Fred\"));\n</code></pre>\n<p>However, since the typical usage for a plural or gender is for it to\nbe at the top-level, we can also omit the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> call and\nprovide its parameters to the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#plural\">Intl.plural</a> call instead.</p>\n<pre><code>  remainingEmailsMessage(int howMany, String userName) =&gt; \n    Intl.plural(\n      howMany,\n      zero: 'There are no emails left for $userName.',\n      one: 'There is one email left for $userName.',\n      other: 'There are $howMany emails left for $userName.'),\n      name: \"remainingEmailsMessage\",\n      args: [howMany, userName],\n      desc: \"How many emails remain after archiving.\",\n      examples: {'number': 42, 'userName': 'Fred'});\n</code></pre>\n<p>Similarly, there is an <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#gender\">Intl.gender</a> message, and plurals\nand genders can be nested.</p>\n<pre><code>  notOnlineMessage(String userName, String userGender) =&gt; \n    Intl.gender(\n      userGender,\n      male: '$userName is unavailable because he is not online.',\n      female: '$userName is unavailable because she is not online.',\n      other: '$userName is unavailable because they are not online'),\n      name: \"notOnlineMessage\",\n      args: [userName, userGender],\n      desc: \"The user is not available to hangout.\",\n      examples: {{'userGender': 'male', 'userName': 'Fred'},\n          {'userGender': 'female', 'userName' : 'Alice'}});\n</code></pre>\n<h2>Extracting And Using Translated Messages</h2>\n<p>When your program contains messages that need translation, these must\nbe extracted from the program source, sent to human translators, and the\nresults need to be incorporated. This is still work in progress, and\nthe extraction is done to a custom JSON format that is not supported\nby translation tools. We intend to support one or more actual\ntranslation file formats.</p>\n<p>To extract messages, run the <code>pkg/intl/test/extract_to_json.dart</code> program.</p>\n<pre><code>  dart extract_to_json.dart --output-dir=target/directory\n      my_program.dart more_of_my_program.dart\n</code></pre>\n<p>This will produce a file <code>intl_messages.json</code> with the messages from\nall of these programs. This is in a simple JSON format with a map from\nmessage names to message strings.</p>\n<p>The reverse step expects to receive a series of files, one per\nlocale. These consist of a map with the entry for \"_locale\" indicating\nthe locale, and with the function name mapped to the translated\nstring. However, plurals and genders are currently represented in an\nopaque form, by serializing the internal objects that represent\nthem. You can see the generation of this code in the\n<code>make_hardcoded_translation.dart</code> test file.</p>\n<p>If you manage to create such a set of input files, then you can run</p>\n<pre><code>  dart generate_from_json.dart --generated_file_prefix=&lt;prefix&gt; \n      &lt;my dart files&gt; &lt;translated json files&gt;\n</code></pre>\n<p>This will generate Dart libraries, one per locale, which contain the\ntranslated versions. Your Dart libraries can import the primary file,\nnamed <code>&lt;prefix&gt;messages_all.dart</code>, and then call the initialization\nfor a specific locale. Once that's done, any\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> calls made in the context of that locale\nwill automatically print the translated version instead of the\noriginal.</p>\n<pre><code>  import \"my_prefix_messages_all.dart\";\n  ...\n  initializeMessages(\"dk\").then(printSomeMessages);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nmessage data is available.</p>\n<h2>Number Formatting and Parsing</h2>\n<p>To format a number, create a NumberFormat instance.</p>\n<pre><code>  var f = new NumberFormat(\"###.0#\", \"en_US\");\n  print(f.format(12.345));\n    ==&gt; 12.34\n</code></pre>\n<p>The locale parameter is optional. If omitted, then it will use the\ncurrent locale. The format string is as described in\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/NumberFormat.html\">NumberFormat</a></p>\n<p>It's also possible to access the number symbol data for the current\nlocale, which provides information as to the various separator\ncharacters, patterns, and other information used for formatting, as</p>\n<pre><code>  f.symbols\n</code></pre>\n<p>Current known limitations are that the currency format will only print\nthe name of the currency, and does not support currency symbols, and\nthat the scientific format does not really agree with scientific\nnotation. Number parsing is not yet implemented.</p>\n<p>Note that before doing any number formatting for a particular locale\nyou must load the appropriate data by calling</p>\n<pre><code>  import 'package:intl/number_symbols_data_local.dart';\n  ...\n  initializeNumberFormatting(localeName, null).then(formatNumbers);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nformatting data is available. Note that right now this includes all\nthe data for a locales. We expect to make this use deferred loading to\nreduce code size.</p>\n<h2>Date Formatting and Parsing</h2>\n<p>To format a <a href=\"https://api.dartlang.org/docs/channels/stable/latest/dart_core/DateTime.html\">DateTime</a>, create a <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>\ninstance. These can be created using a set of commonly used skeletons\ntaken from ICU/CLDR or using an explicit pattern. For details on the\nsupported skeletons and patterns see <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>.</p>\n<pre><code>  new DateFormat.yMMMMEEEEd().format(aDateTime);\n    ==&gt; 'Wednesday, January 10, 2012'\n  new DateFormat(\"EEEEE\", \"en_US\").format(aDateTime);\n    ==&gt; 'Wednesday'\n  new DateFormat(\"EEEEE\", \"ln\").format(aDateTime);\n    ==&gt; 'mokɔlɔ mwa mísáto'\n</code></pre>\n<p>You can also parse dates using the same skeletons or patterns.</p>\n<pre><code>    new DateFormat.yMd(\"en_US\").parse(\"1/10/2012\");\n    new DateFormat(\"Hms\", \"en_US\").parse('14:23:01');\n</code></pre>\n<p>Skeletons can be combined, the main use being to print a full date and\ntime, e.g.</p>\n<pre><code>    new DateFormat.yMEd().add_jms().format(new DateTime.now());\n      ==&gt; 'Thu, 5/23/2013 10:21:47 AM'\n</code></pre>\n<p>Known limitations: Time zones are not yet supported. Dart\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/dart_core/DateTime.html\">DateTime</a> objects don't have a time zone, so are either\nlocal or UTC. Formatting and parsing Durations is not yet implemented.</p>\n<p>Note that before doing any DateTime formatting for a particular\nlocale, you must load the appropriate data by calling.</p>\n<pre><code>    import 'package:intl/date_symbol_data_local.dart';\n    ...\n    initializeDateFormatting(\"de_DE\", null).then(formatDates);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nformatting data is available.</p>\n<p>There are other mechanisms for loading the date formatting data\nimplemented, but we expect to deprecate those in favor of having the\ndata in a library as in the above, and using deferred loading to only\nload the portions that are needed. For the time being, this will\ninclude all of the data, which will increase code size.</p>\n<h2>Bidirectional Text</h2>\n<p>The class <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html\">BidiFormatter</a> provides utilities for\nworking with Bidirectional text. We can wrap the string with unicode\ndirectional indicator characters or with an HTML span to indicate\ndirection. The direction can be specified with the\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html#RTL\">RTL</a> and <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html#LTR\">LTR</a> constructors, or\ndetected from the text.</p>\n<pre><code>    new BidiFormatter.RTL().wrapWithUnicode('xyz');\n    new BidiFormatter.RTL().wrapWithSpan('xyz');\n</code></pre>"},{"name":"date_time_patterns","qualifiedName":"intl/date_time_patterns","preview":"<p>Date/time formatting symbols for a large subset of locales.</p>","packageName":"intl","packageIntro":"<h1>Intl</h1>\n<p>This package provides internationalization and localization facilities,\nincluding message translation, plurals and genders, date/number formatting\nand parsing, and bidirectional text.</p>\n<h2>General</h2>\n<p>The most important library is <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl.html\">intl</a>. It defines the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html\">Intl</a>\nclass, with the default locale and methods for accessing most of the\ninternationalization mechanisms. This library also defines the\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>, <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/NumberFormat.html\">NumberFormat</a>, and\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html\">BidiFormatter</a> classes.</p>\n<h2>Current locale</h2>\n<p>The package has a single current locale, called <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#defaultLocale\">defaultLocale</a>.\nOperations will use that locale unless told to do otherwise.</p>\n<p>To set the global locale, you can explicitly set it, e.g.</p>\n<pre><code>  Intl.defaultLocale = 'pt_BR';\n</code></pre>\n<p>or get it from the browser by</p>\n<pre><code>  import \"package:intl/intl_browser.dart\";\n  ...\n  findSystemLocale().then(runTheRestOfMyProgram);\n</code></pre>\n<p>To temporarily override the current locale, pass the operation\nto <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#withLocale\">withLocale</a>.</p>\n<pre><code>  Intl.withLocale('fr', () =&gt; print(myLocalizedMessage());\n</code></pre>\n<p>To override it for a very specific operation you can create a format object in\na specific locale, or pass in the locale as a parameter to methods.</p>\n<pre><code>  var format = new DateFormat.yMd(\"ar\");\n  var dateString = format.format(new DateTime.now());\n  print(myMessage(dateString, locale: 'ar');\n</code></pre>\n<h2>Initialization</h2>\n<p>All the different types of locale data require an async initialization step\nto make\nsure the data is available. This reduces the size of the application by only\nloading the\ndata that is actually required. However, deferred loading does not yet work for\nmultiple\nlibraries, so currently all the code will be included anyay, increasing the code\nsize in the short term.</p>\n<p>Each different area of internationalization (messages, dates, numbers) requires\na separate initialization process. That way, if the application only needs to\nformat dates, it doesn't need to take the time or space to load up messages,\nnumbers, or other things it may not need.</p>\n<p>With messages, there is also a need to import a file that won't exist until\nthe code generation step has been run. This can be awkward, but can be worked\naround by creating a stub <code>messages_all.dart</code> file, running an empty translation\nstep, or commenting out the import until translations are available.\nSee \"Extracting and Using Translated Messages\"</p>\n<h2>Messages</h2>\n<p>Messages to be localized are written as functions that return the result of\nan <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> call.</p>\n<pre><code>  String continueMessage() =&gt; Intl.message(\n      \"Hit any key to continue\",\n      name: \"continueMessage\",\n      args: [],\n      desc: \"Explains that we will not proceed further until \"\n          \"the user presses a key\");\n  print(continueMessage());\n</code></pre>\n<p>This provides, in addition to the basic message string, a name, a\ndescription for translators, the arguments used in the message, and\nexamples. The <code>name</code> and <code>args</code> parameters are required, and must\nmatch the name and arguments list of the function.  In the future we\nhope to have these provided automatically.</p>\n<p>This can be run in the program before any translation has been done,\nand will just return the message string. It can also be extracted to a\nfile and then be made to return a translated version without modifying\nthe original program. See \"Extracting Messages\" below for more\ndetails.</p>\n<p>The purpose of wrapping the message in a function is to allow it to\nhave parameters which can be used in the result. The message string is\nallowed to use a restricted form of Dart string interpolation, where\nonly the function's parameters can be used, and only in simple\nexpressions. Local variables cannot be used, and neither can\nexpressions with curly braces. Only the message string can have\ninterpolation. The name, desc, args, and examples must be literals and\nnot contain interpolations. Only the args parameter can refer to\nvariables, and it should list exactly the function parameters. If you\nare passing numbers or dates and you want them formatted, you must do\nthe formatting outside the function and pass the formatted string into\nthe message.</p>\n<pre><code>  greetingMessage(name) =&gt; Intl.message(\n      \"Hello $name!\",\n      name: \"greetingMessage\",\n      args: [name],\n      desc: \"Greet the user as they first open the application\",\n      examples: {'name': \"Emily\"});\n  print(greetingMessage('Dan'));\n</code></pre>\n<p>There is one special class of complex expressions allowed in the\nmessage string, for plurals and genders.</p>\n<pre><code>  remainingEmailsMessage(int howMany, String userName) =&gt; \n    Intl.message(\n      \"${Intl.plural(howMany,\n          zero: 'There are no emails left for $userName.',\n          one: 'There is one email left for $userName.',\n          other: 'There are $howMany emails left for $userName.')}\",\n    name: \"remainingEmailsMessage\",\n    args: [howMany, userName],\n    desc: \"How many emails remain after archiving.\",\n    examples: {'number': 42, 'userName': 'Fred'});\n\n  print(remainingEmailsMessage(1, \"Fred\"));\n</code></pre>\n<p>However, since the typical usage for a plural or gender is for it to\nbe at the top-level, we can also omit the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> call and\nprovide its parameters to the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#plural\">Intl.plural</a> call instead.</p>\n<pre><code>  remainingEmailsMessage(int howMany, String userName) =&gt; \n    Intl.plural(\n      howMany,\n      zero: 'There are no emails left for $userName.',\n      one: 'There is one email left for $userName.',\n      other: 'There are $howMany emails left for $userName.'),\n      name: \"remainingEmailsMessage\",\n      args: [howMany, userName],\n      desc: \"How many emails remain after archiving.\",\n      examples: {'number': 42, 'userName': 'Fred'});\n</code></pre>\n<p>Similarly, there is an <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#gender\">Intl.gender</a> message, and plurals\nand genders can be nested.</p>\n<pre><code>  notOnlineMessage(String userName, String userGender) =&gt; \n    Intl.gender(\n      userGender,\n      male: '$userName is unavailable because he is not online.',\n      female: '$userName is unavailable because she is not online.',\n      other: '$userName is unavailable because they are not online'),\n      name: \"notOnlineMessage\",\n      args: [userName, userGender],\n      desc: \"The user is not available to hangout.\",\n      examples: {{'userGender': 'male', 'userName': 'Fred'},\n          {'userGender': 'female', 'userName' : 'Alice'}});\n</code></pre>\n<h2>Extracting And Using Translated Messages</h2>\n<p>When your program contains messages that need translation, these must\nbe extracted from the program source, sent to human translators, and the\nresults need to be incorporated. This is still work in progress, and\nthe extraction is done to a custom JSON format that is not supported\nby translation tools. We intend to support one or more actual\ntranslation file formats.</p>\n<p>To extract messages, run the <code>pkg/intl/test/extract_to_json.dart</code> program.</p>\n<pre><code>  dart extract_to_json.dart --output-dir=target/directory\n      my_program.dart more_of_my_program.dart\n</code></pre>\n<p>This will produce a file <code>intl_messages.json</code> with the messages from\nall of these programs. This is in a simple JSON format with a map from\nmessage names to message strings.</p>\n<p>The reverse step expects to receive a series of files, one per\nlocale. These consist of a map with the entry for \"_locale\" indicating\nthe locale, and with the function name mapped to the translated\nstring. However, plurals and genders are currently represented in an\nopaque form, by serializing the internal objects that represent\nthem. You can see the generation of this code in the\n<code>make_hardcoded_translation.dart</code> test file.</p>\n<p>If you manage to create such a set of input files, then you can run</p>\n<pre><code>  dart generate_from_json.dart --generated_file_prefix=&lt;prefix&gt; \n      &lt;my dart files&gt; &lt;translated json files&gt;\n</code></pre>\n<p>This will generate Dart libraries, one per locale, which contain the\ntranslated versions. Your Dart libraries can import the primary file,\nnamed <code>&lt;prefix&gt;messages_all.dart</code>, and then call the initialization\nfor a specific locale. Once that's done, any\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> calls made in the context of that locale\nwill automatically print the translated version instead of the\noriginal.</p>\n<pre><code>  import \"my_prefix_messages_all.dart\";\n  ...\n  initializeMessages(\"dk\").then(printSomeMessages);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nmessage data is available.</p>\n<h2>Number Formatting and Parsing</h2>\n<p>To format a number, create a NumberFormat instance.</p>\n<pre><code>  var f = new NumberFormat(\"###.0#\", \"en_US\");\n  print(f.format(12.345));\n    ==&gt; 12.34\n</code></pre>\n<p>The locale parameter is optional. If omitted, then it will use the\ncurrent locale. The format string is as described in\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/NumberFormat.html\">NumberFormat</a></p>\n<p>It's also possible to access the number symbol data for the current\nlocale, which provides information as to the various separator\ncharacters, patterns, and other information used for formatting, as</p>\n<pre><code>  f.symbols\n</code></pre>\n<p>Current known limitations are that the currency format will only print\nthe name of the currency, and does not support currency symbols, and\nthat the scientific format does not really agree with scientific\nnotation. Number parsing is not yet implemented.</p>\n<p>Note that before doing any number formatting for a particular locale\nyou must load the appropriate data by calling</p>\n<pre><code>  import 'package:intl/number_symbols_data_local.dart';\n  ...\n  initializeNumberFormatting(localeName, null).then(formatNumbers);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nformatting data is available. Note that right now this includes all\nthe data for a locales. We expect to make this use deferred loading to\nreduce code size.</p>\n<h2>Date Formatting and Parsing</h2>\n<p>To format a <a href=\"https://api.dartlang.org/docs/channels/stable/latest/dart_core/DateTime.html\">DateTime</a>, create a <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>\ninstance. These can be created using a set of commonly used skeletons\ntaken from ICU/CLDR or using an explicit pattern. For details on the\nsupported skeletons and patterns see <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>.</p>\n<pre><code>  new DateFormat.yMMMMEEEEd().format(aDateTime);\n    ==&gt; 'Wednesday, January 10, 2012'\n  new DateFormat(\"EEEEE\", \"en_US\").format(aDateTime);\n    ==&gt; 'Wednesday'\n  new DateFormat(\"EEEEE\", \"ln\").format(aDateTime);\n    ==&gt; 'mokɔlɔ mwa mísáto'\n</code></pre>\n<p>You can also parse dates using the same skeletons or patterns.</p>\n<pre><code>    new DateFormat.yMd(\"en_US\").parse(\"1/10/2012\");\n    new DateFormat(\"Hms\", \"en_US\").parse('14:23:01');\n</code></pre>\n<p>Skeletons can be combined, the main use being to print a full date and\ntime, e.g.</p>\n<pre><code>    new DateFormat.yMEd().add_jms().format(new DateTime.now());\n      ==&gt; 'Thu, 5/23/2013 10:21:47 AM'\n</code></pre>\n<p>Known limitations: Time zones are not yet supported. Dart\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/dart_core/DateTime.html\">DateTime</a> objects don't have a time zone, so are either\nlocal or UTC. Formatting and parsing Durations is not yet implemented.</p>\n<p>Note that before doing any DateTime formatting for a particular\nlocale, you must load the appropriate data by calling.</p>\n<pre><code>    import 'package:intl/date_symbol_data_local.dart';\n    ...\n    initializeDateFormatting(\"de_DE\", null).then(formatDates);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nformatting data is available.</p>\n<p>There are other mechanisms for loading the date formatting data\nimplemented, but we expect to deprecate those in favor of having the\ndata in a library as in the above, and using deferred loading to only\nload the portions that are needed. For the time being, this will\ninclude all of the data, which will increase code size.</p>\n<h2>Bidirectional Text</h2>\n<p>The class <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html\">BidiFormatter</a> provides utilities for\nworking with Bidirectional text. We can wrap the string with unicode\ndirectional indicator characters or with an HTML span to indicate\ndirection. The direction can be specified with the\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html#RTL\">RTL</a> and <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html#LTR\">LTR</a> constructors, or\ndetected from the text.</p>\n<pre><code>    new BidiFormatter.RTL().wrapWithUnicode('xyz');\n    new BidiFormatter.RTL().wrapWithSpan('xyz');\n</code></pre>"},{"name":"number_symbols","qualifiedName":"intl/number_symbols","packageName":"intl","packageIntro":"<h1>Intl</h1>\n<p>This package provides internationalization and localization facilities,\nincluding message translation, plurals and genders, date/number formatting\nand parsing, and bidirectional text.</p>\n<h2>General</h2>\n<p>The most important library is <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl.html\">intl</a>. It defines the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html\">Intl</a>\nclass, with the default locale and methods for accessing most of the\ninternationalization mechanisms. This library also defines the\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>, <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/NumberFormat.html\">NumberFormat</a>, and\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html\">BidiFormatter</a> classes.</p>\n<h2>Current locale</h2>\n<p>The package has a single current locale, called <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#defaultLocale\">defaultLocale</a>.\nOperations will use that locale unless told to do otherwise.</p>\n<p>To set the global locale, you can explicitly set it, e.g.</p>\n<pre><code>  Intl.defaultLocale = 'pt_BR';\n</code></pre>\n<p>or get it from the browser by</p>\n<pre><code>  import \"package:intl/intl_browser.dart\";\n  ...\n  findSystemLocale().then(runTheRestOfMyProgram);\n</code></pre>\n<p>To temporarily override the current locale, pass the operation\nto <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#withLocale\">withLocale</a>.</p>\n<pre><code>  Intl.withLocale('fr', () =&gt; print(myLocalizedMessage());\n</code></pre>\n<p>To override it for a very specific operation you can create a format object in\na specific locale, or pass in the locale as a parameter to methods.</p>\n<pre><code>  var format = new DateFormat.yMd(\"ar\");\n  var dateString = format.format(new DateTime.now());\n  print(myMessage(dateString, locale: 'ar');\n</code></pre>\n<h2>Initialization</h2>\n<p>All the different types of locale data require an async initialization step\nto make\nsure the data is available. This reduces the size of the application by only\nloading the\ndata that is actually required. However, deferred loading does not yet work for\nmultiple\nlibraries, so currently all the code will be included anyay, increasing the code\nsize in the short term.</p>\n<p>Each different area of internationalization (messages, dates, numbers) requires\na separate initialization process. That way, if the application only needs to\nformat dates, it doesn't need to take the time or space to load up messages,\nnumbers, or other things it may not need.</p>\n<p>With messages, there is also a need to import a file that won't exist until\nthe code generation step has been run. This can be awkward, but can be worked\naround by creating a stub <code>messages_all.dart</code> file, running an empty translation\nstep, or commenting out the import until translations are available.\nSee \"Extracting and Using Translated Messages\"</p>\n<h2>Messages</h2>\n<p>Messages to be localized are written as functions that return the result of\nan <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> call.</p>\n<pre><code>  String continueMessage() =&gt; Intl.message(\n      \"Hit any key to continue\",\n      name: \"continueMessage\",\n      args: [],\n      desc: \"Explains that we will not proceed further until \"\n          \"the user presses a key\");\n  print(continueMessage());\n</code></pre>\n<p>This provides, in addition to the basic message string, a name, a\ndescription for translators, the arguments used in the message, and\nexamples. The <code>name</code> and <code>args</code> parameters are required, and must\nmatch the name and arguments list of the function.  In the future we\nhope to have these provided automatically.</p>\n<p>This can be run in the program before any translation has been done,\nand will just return the message string. It can also be extracted to a\nfile and then be made to return a translated version without modifying\nthe original program. See \"Extracting Messages\" below for more\ndetails.</p>\n<p>The purpose of wrapping the message in a function is to allow it to\nhave parameters which can be used in the result. The message string is\nallowed to use a restricted form of Dart string interpolation, where\nonly the function's parameters can be used, and only in simple\nexpressions. Local variables cannot be used, and neither can\nexpressions with curly braces. Only the message string can have\ninterpolation. The name, desc, args, and examples must be literals and\nnot contain interpolations. Only the args parameter can refer to\nvariables, and it should list exactly the function parameters. If you\nare passing numbers or dates and you want them formatted, you must do\nthe formatting outside the function and pass the formatted string into\nthe message.</p>\n<pre><code>  greetingMessage(name) =&gt; Intl.message(\n      \"Hello $name!\",\n      name: \"greetingMessage\",\n      args: [name],\n      desc: \"Greet the user as they first open the application\",\n      examples: {'name': \"Emily\"});\n  print(greetingMessage('Dan'));\n</code></pre>\n<p>There is one special class of complex expressions allowed in the\nmessage string, for plurals and genders.</p>\n<pre><code>  remainingEmailsMessage(int howMany, String userName) =&gt; \n    Intl.message(\n      \"${Intl.plural(howMany,\n          zero: 'There are no emails left for $userName.',\n          one: 'There is one email left for $userName.',\n          other: 'There are $howMany emails left for $userName.')}\",\n    name: \"remainingEmailsMessage\",\n    args: [howMany, userName],\n    desc: \"How many emails remain after archiving.\",\n    examples: {'number': 42, 'userName': 'Fred'});\n\n  print(remainingEmailsMessage(1, \"Fred\"));\n</code></pre>\n<p>However, since the typical usage for a plural or gender is for it to\nbe at the top-level, we can also omit the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> call and\nprovide its parameters to the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#plural\">Intl.plural</a> call instead.</p>\n<pre><code>  remainingEmailsMessage(int howMany, String userName) =&gt; \n    Intl.plural(\n      howMany,\n      zero: 'There are no emails left for $userName.',\n      one: 'There is one email left for $userName.',\n      other: 'There are $howMany emails left for $userName.'),\n      name: \"remainingEmailsMessage\",\n      args: [howMany, userName],\n      desc: \"How many emails remain after archiving.\",\n      examples: {'number': 42, 'userName': 'Fred'});\n</code></pre>\n<p>Similarly, there is an <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#gender\">Intl.gender</a> message, and plurals\nand genders can be nested.</p>\n<pre><code>  notOnlineMessage(String userName, String userGender) =&gt; \n    Intl.gender(\n      userGender,\n      male: '$userName is unavailable because he is not online.',\n      female: '$userName is unavailable because she is not online.',\n      other: '$userName is unavailable because they are not online'),\n      name: \"notOnlineMessage\",\n      args: [userName, userGender],\n      desc: \"The user is not available to hangout.\",\n      examples: {{'userGender': 'male', 'userName': 'Fred'},\n          {'userGender': 'female', 'userName' : 'Alice'}});\n</code></pre>\n<h2>Extracting And Using Translated Messages</h2>\n<p>When your program contains messages that need translation, these must\nbe extracted from the program source, sent to human translators, and the\nresults need to be incorporated. This is still work in progress, and\nthe extraction is done to a custom JSON format that is not supported\nby translation tools. We intend to support one or more actual\ntranslation file formats.</p>\n<p>To extract messages, run the <code>pkg/intl/test/extract_to_json.dart</code> program.</p>\n<pre><code>  dart extract_to_json.dart --output-dir=target/directory\n      my_program.dart more_of_my_program.dart\n</code></pre>\n<p>This will produce a file <code>intl_messages.json</code> with the messages from\nall of these programs. This is in a simple JSON format with a map from\nmessage names to message strings.</p>\n<p>The reverse step expects to receive a series of files, one per\nlocale. These consist of a map with the entry for \"_locale\" indicating\nthe locale, and with the function name mapped to the translated\nstring. However, plurals and genders are currently represented in an\nopaque form, by serializing the internal objects that represent\nthem. You can see the generation of this code in the\n<code>make_hardcoded_translation.dart</code> test file.</p>\n<p>If you manage to create such a set of input files, then you can run</p>\n<pre><code>  dart generate_from_json.dart --generated_file_prefix=&lt;prefix&gt; \n      &lt;my dart files&gt; &lt;translated json files&gt;\n</code></pre>\n<p>This will generate Dart libraries, one per locale, which contain the\ntranslated versions. Your Dart libraries can import the primary file,\nnamed <code>&lt;prefix&gt;messages_all.dart</code>, and then call the initialization\nfor a specific locale. Once that's done, any\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> calls made in the context of that locale\nwill automatically print the translated version instead of the\noriginal.</p>\n<pre><code>  import \"my_prefix_messages_all.dart\";\n  ...\n  initializeMessages(\"dk\").then(printSomeMessages);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nmessage data is available.</p>\n<h2>Number Formatting and Parsing</h2>\n<p>To format a number, create a NumberFormat instance.</p>\n<pre><code>  var f = new NumberFormat(\"###.0#\", \"en_US\");\n  print(f.format(12.345));\n    ==&gt; 12.34\n</code></pre>\n<p>The locale parameter is optional. If omitted, then it will use the\ncurrent locale. The format string is as described in\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/NumberFormat.html\">NumberFormat</a></p>\n<p>It's also possible to access the number symbol data for the current\nlocale, which provides information as to the various separator\ncharacters, patterns, and other information used for formatting, as</p>\n<pre><code>  f.symbols\n</code></pre>\n<p>Current known limitations are that the currency format will only print\nthe name of the currency, and does not support currency symbols, and\nthat the scientific format does not really agree with scientific\nnotation. Number parsing is not yet implemented.</p>\n<p>Note that before doing any number formatting for a particular locale\nyou must load the appropriate data by calling</p>\n<pre><code>  import 'package:intl/number_symbols_data_local.dart';\n  ...\n  initializeNumberFormatting(localeName, null).then(formatNumbers);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nformatting data is available. Note that right now this includes all\nthe data for a locales. We expect to make this use deferred loading to\nreduce code size.</p>\n<h2>Date Formatting and Parsing</h2>\n<p>To format a <a href=\"https://api.dartlang.org/docs/channels/stable/latest/dart_core/DateTime.html\">DateTime</a>, create a <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>\ninstance. These can be created using a set of commonly used skeletons\ntaken from ICU/CLDR or using an explicit pattern. For details on the\nsupported skeletons and patterns see <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>.</p>\n<pre><code>  new DateFormat.yMMMMEEEEd().format(aDateTime);\n    ==&gt; 'Wednesday, January 10, 2012'\n  new DateFormat(\"EEEEE\", \"en_US\").format(aDateTime);\n    ==&gt; 'Wednesday'\n  new DateFormat(\"EEEEE\", \"ln\").format(aDateTime);\n    ==&gt; 'mokɔlɔ mwa mísáto'\n</code></pre>\n<p>You can also parse dates using the same skeletons or patterns.</p>\n<pre><code>    new DateFormat.yMd(\"en_US\").parse(\"1/10/2012\");\n    new DateFormat(\"Hms\", \"en_US\").parse('14:23:01');\n</code></pre>\n<p>Skeletons can be combined, the main use being to print a full date and\ntime, e.g.</p>\n<pre><code>    new DateFormat.yMEd().add_jms().format(new DateTime.now());\n      ==&gt; 'Thu, 5/23/2013 10:21:47 AM'\n</code></pre>\n<p>Known limitations: Time zones are not yet supported. Dart\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/dart_core/DateTime.html\">DateTime</a> objects don't have a time zone, so are either\nlocal or UTC. Formatting and parsing Durations is not yet implemented.</p>\n<p>Note that before doing any DateTime formatting for a particular\nlocale, you must load the appropriate data by calling.</p>\n<pre><code>    import 'package:intl/date_symbol_data_local.dart';\n    ...\n    initializeDateFormatting(\"de_DE\", null).then(formatDates);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nformatting data is available.</p>\n<p>There are other mechanisms for loading the date formatting data\nimplemented, but we expect to deprecate those in favor of having the\ndata in a library as in the above, and using deferred loading to only\nload the portions that are needed. For the time being, this will\ninclude all of the data, which will increase code size.</p>\n<h2>Bidirectional Text</h2>\n<p>The class <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html\">BidiFormatter</a> provides utilities for\nworking with Bidirectional text. We can wrap the string with unicode\ndirectional indicator characters or with an HTML span to indicate\ndirection. The direction can be specified with the\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html#RTL\">RTL</a> and <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html#LTR\">LTR</a> constructors, or\ndetected from the text.</p>\n<pre><code>    new BidiFormatter.RTL().wrapWithUnicode('xyz');\n    new BidiFormatter.RTL().wrapWithSpan('xyz');\n</code></pre>"},{"name":"intl","qualifiedName":"intl/intl","preview":"<p>This library provides internationalization and localization. This includes\nmessage formatting and replacement, date and number formatting and parsing,\nand utilities for working with Bidirectional text.</p>","packageName":"intl","packageIntro":"<h1>Intl</h1>\n<p>This package provides internationalization and localization facilities,\nincluding message translation, plurals and genders, date/number formatting\nand parsing, and bidirectional text.</p>\n<h2>General</h2>\n<p>The most important library is <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl.html\">intl</a>. It defines the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html\">Intl</a>\nclass, with the default locale and methods for accessing most of the\ninternationalization mechanisms. This library also defines the\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>, <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/NumberFormat.html\">NumberFormat</a>, and\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html\">BidiFormatter</a> classes.</p>\n<h2>Current locale</h2>\n<p>The package has a single current locale, called <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#defaultLocale\">defaultLocale</a>.\nOperations will use that locale unless told to do otherwise.</p>\n<p>To set the global locale, you can explicitly set it, e.g.</p>\n<pre><code>  Intl.defaultLocale = 'pt_BR';\n</code></pre>\n<p>or get it from the browser by</p>\n<pre><code>  import \"package:intl/intl_browser.dart\";\n  ...\n  findSystemLocale().then(runTheRestOfMyProgram);\n</code></pre>\n<p>To temporarily override the current locale, pass the operation\nto <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#withLocale\">withLocale</a>.</p>\n<pre><code>  Intl.withLocale('fr', () =&gt; print(myLocalizedMessage());\n</code></pre>\n<p>To override it for a very specific operation you can create a format object in\na specific locale, or pass in the locale as a parameter to methods.</p>\n<pre><code>  var format = new DateFormat.yMd(\"ar\");\n  var dateString = format.format(new DateTime.now());\n  print(myMessage(dateString, locale: 'ar');\n</code></pre>\n<h2>Initialization</h2>\n<p>All the different types of locale data require an async initialization step\nto make\nsure the data is available. This reduces the size of the application by only\nloading the\ndata that is actually required. However, deferred loading does not yet work for\nmultiple\nlibraries, so currently all the code will be included anyay, increasing the code\nsize in the short term.</p>\n<p>Each different area of internationalization (messages, dates, numbers) requires\na separate initialization process. That way, if the application only needs to\nformat dates, it doesn't need to take the time or space to load up messages,\nnumbers, or other things it may not need.</p>\n<p>With messages, there is also a need to import a file that won't exist until\nthe code generation step has been run. This can be awkward, but can be worked\naround by creating a stub <code>messages_all.dart</code> file, running an empty translation\nstep, or commenting out the import until translations are available.\nSee \"Extracting and Using Translated Messages\"</p>\n<h2>Messages</h2>\n<p>Messages to be localized are written as functions that return the result of\nan <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> call.</p>\n<pre><code>  String continueMessage() =&gt; Intl.message(\n      \"Hit any key to continue\",\n      name: \"continueMessage\",\n      args: [],\n      desc: \"Explains that we will not proceed further until \"\n          \"the user presses a key\");\n  print(continueMessage());\n</code></pre>\n<p>This provides, in addition to the basic message string, a name, a\ndescription for translators, the arguments used in the message, and\nexamples. The <code>name</code> and <code>args</code> parameters are required, and must\nmatch the name and arguments list of the function.  In the future we\nhope to have these provided automatically.</p>\n<p>This can be run in the program before any translation has been done,\nand will just return the message string. It can also be extracted to a\nfile and then be made to return a translated version without modifying\nthe original program. See \"Extracting Messages\" below for more\ndetails.</p>\n<p>The purpose of wrapping the message in a function is to allow it to\nhave parameters which can be used in the result. The message string is\nallowed to use a restricted form of Dart string interpolation, where\nonly the function's parameters can be used, and only in simple\nexpressions. Local variables cannot be used, and neither can\nexpressions with curly braces. Only the message string can have\ninterpolation. The name, desc, args, and examples must be literals and\nnot contain interpolations. Only the args parameter can refer to\nvariables, and it should list exactly the function parameters. If you\nare passing numbers or dates and you want them formatted, you must do\nthe formatting outside the function and pass the formatted string into\nthe message.</p>\n<pre><code>  greetingMessage(name) =&gt; Intl.message(\n      \"Hello $name!\",\n      name: \"greetingMessage\",\n      args: [name],\n      desc: \"Greet the user as they first open the application\",\n      examples: {'name': \"Emily\"});\n  print(greetingMessage('Dan'));\n</code></pre>\n<p>There is one special class of complex expressions allowed in the\nmessage string, for plurals and genders.</p>\n<pre><code>  remainingEmailsMessage(int howMany, String userName) =&gt; \n    Intl.message(\n      \"${Intl.plural(howMany,\n          zero: 'There are no emails left for $userName.',\n          one: 'There is one email left for $userName.',\n          other: 'There are $howMany emails left for $userName.')}\",\n    name: \"remainingEmailsMessage\",\n    args: [howMany, userName],\n    desc: \"How many emails remain after archiving.\",\n    examples: {'number': 42, 'userName': 'Fred'});\n\n  print(remainingEmailsMessage(1, \"Fred\"));\n</code></pre>\n<p>However, since the typical usage for a plural or gender is for it to\nbe at the top-level, we can also omit the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> call and\nprovide its parameters to the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#plural\">Intl.plural</a> call instead.</p>\n<pre><code>  remainingEmailsMessage(int howMany, String userName) =&gt; \n    Intl.plural(\n      howMany,\n      zero: 'There are no emails left for $userName.',\n      one: 'There is one email left for $userName.',\n      other: 'There are $howMany emails left for $userName.'),\n      name: \"remainingEmailsMessage\",\n      args: [howMany, userName],\n      desc: \"How many emails remain after archiving.\",\n      examples: {'number': 42, 'userName': 'Fred'});\n</code></pre>\n<p>Similarly, there is an <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#gender\">Intl.gender</a> message, and plurals\nand genders can be nested.</p>\n<pre><code>  notOnlineMessage(String userName, String userGender) =&gt; \n    Intl.gender(\n      userGender,\n      male: '$userName is unavailable because he is not online.',\n      female: '$userName is unavailable because she is not online.',\n      other: '$userName is unavailable because they are not online'),\n      name: \"notOnlineMessage\",\n      args: [userName, userGender],\n      desc: \"The user is not available to hangout.\",\n      examples: {{'userGender': 'male', 'userName': 'Fred'},\n          {'userGender': 'female', 'userName' : 'Alice'}});\n</code></pre>\n<h2>Extracting And Using Translated Messages</h2>\n<p>When your program contains messages that need translation, these must\nbe extracted from the program source, sent to human translators, and the\nresults need to be incorporated. This is still work in progress, and\nthe extraction is done to a custom JSON format that is not supported\nby translation tools. We intend to support one or more actual\ntranslation file formats.</p>\n<p>To extract messages, run the <code>pkg/intl/test/extract_to_json.dart</code> program.</p>\n<pre><code>  dart extract_to_json.dart --output-dir=target/directory\n      my_program.dart more_of_my_program.dart\n</code></pre>\n<p>This will produce a file <code>intl_messages.json</code> with the messages from\nall of these programs. This is in a simple JSON format with a map from\nmessage names to message strings.</p>\n<p>The reverse step expects to receive a series of files, one per\nlocale. These consist of a map with the entry for \"_locale\" indicating\nthe locale, and with the function name mapped to the translated\nstring. However, plurals and genders are currently represented in an\nopaque form, by serializing the internal objects that represent\nthem. You can see the generation of this code in the\n<code>make_hardcoded_translation.dart</code> test file.</p>\n<p>If you manage to create such a set of input files, then you can run</p>\n<pre><code>  dart generate_from_json.dart --generated_file_prefix=&lt;prefix&gt; \n      &lt;my dart files&gt; &lt;translated json files&gt;\n</code></pre>\n<p>This will generate Dart libraries, one per locale, which contain the\ntranslated versions. Your Dart libraries can import the primary file,\nnamed <code>&lt;prefix&gt;messages_all.dart</code>, and then call the initialization\nfor a specific locale. Once that's done, any\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> calls made in the context of that locale\nwill automatically print the translated version instead of the\noriginal.</p>\n<pre><code>  import \"my_prefix_messages_all.dart\";\n  ...\n  initializeMessages(\"dk\").then(printSomeMessages);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nmessage data is available.</p>\n<h2>Number Formatting and Parsing</h2>\n<p>To format a number, create a NumberFormat instance.</p>\n<pre><code>  var f = new NumberFormat(\"###.0#\", \"en_US\");\n  print(f.format(12.345));\n    ==&gt; 12.34\n</code></pre>\n<p>The locale parameter is optional. If omitted, then it will use the\ncurrent locale. The format string is as described in\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/NumberFormat.html\">NumberFormat</a></p>\n<p>It's also possible to access the number symbol data for the current\nlocale, which provides information as to the various separator\ncharacters, patterns, and other information used for formatting, as</p>\n<pre><code>  f.symbols\n</code></pre>\n<p>Current known limitations are that the currency format will only print\nthe name of the currency, and does not support currency symbols, and\nthat the scientific format does not really agree with scientific\nnotation. Number parsing is not yet implemented.</p>\n<p>Note that before doing any number formatting for a particular locale\nyou must load the appropriate data by calling</p>\n<pre><code>  import 'package:intl/number_symbols_data_local.dart';\n  ...\n  initializeNumberFormatting(localeName, null).then(formatNumbers);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nformatting data is available. Note that right now this includes all\nthe data for a locales. We expect to make this use deferred loading to\nreduce code size.</p>\n<h2>Date Formatting and Parsing</h2>\n<p>To format a <a href=\"https://api.dartlang.org/docs/channels/stable/latest/dart_core/DateTime.html\">DateTime</a>, create a <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>\ninstance. These can be created using a set of commonly used skeletons\ntaken from ICU/CLDR or using an explicit pattern. For details on the\nsupported skeletons and patterns see <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>.</p>\n<pre><code>  new DateFormat.yMMMMEEEEd().format(aDateTime);\n    ==&gt; 'Wednesday, January 10, 2012'\n  new DateFormat(\"EEEEE\", \"en_US\").format(aDateTime);\n    ==&gt; 'Wednesday'\n  new DateFormat(\"EEEEE\", \"ln\").format(aDateTime);\n    ==&gt; 'mokɔlɔ mwa mísáto'\n</code></pre>\n<p>You can also parse dates using the same skeletons or patterns.</p>\n<pre><code>    new DateFormat.yMd(\"en_US\").parse(\"1/10/2012\");\n    new DateFormat(\"Hms\", \"en_US\").parse('14:23:01');\n</code></pre>\n<p>Skeletons can be combined, the main use being to print a full date and\ntime, e.g.</p>\n<pre><code>    new DateFormat.yMEd().add_jms().format(new DateTime.now());\n      ==&gt; 'Thu, 5/23/2013 10:21:47 AM'\n</code></pre>\n<p>Known limitations: Time zones are not yet supported. Dart\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/dart_core/DateTime.html\">DateTime</a> objects don't have a time zone, so are either\nlocal or UTC. Formatting and parsing Durations is not yet implemented.</p>\n<p>Note that before doing any DateTime formatting for a particular\nlocale, you must load the appropriate data by calling.</p>\n<pre><code>    import 'package:intl/date_symbol_data_local.dart';\n    ...\n    initializeDateFormatting(\"de_DE\", null).then(formatDates);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nformatting data is available.</p>\n<p>There are other mechanisms for loading the date formatting data\nimplemented, but we expect to deprecate those in favor of having the\ndata in a library as in the above, and using deferred loading to only\nload the portions that are needed. For the time being, this will\ninclude all of the data, which will increase code size.</p>\n<h2>Bidirectional Text</h2>\n<p>The class <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html\">BidiFormatter</a> provides utilities for\nworking with Bidirectional text. We can wrap the string with unicode\ndirectional indicator characters or with an HTML span to indicate\ndirection. The direction can be specified with the\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html#RTL\">RTL</a> and <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html#LTR\">LTR</a> constructors, or\ndetected from the text.</p>\n<pre><code>    new BidiFormatter.RTL().wrapWithUnicode('xyz');\n    new BidiFormatter.RTL().wrapWithSpan('xyz');\n</code></pre>"},{"name":"date_symbols","qualifiedName":"intl/date_symbols","packageName":"intl","packageIntro":"<h1>Intl</h1>\n<p>This package provides internationalization and localization facilities,\nincluding message translation, plurals and genders, date/number formatting\nand parsing, and bidirectional text.</p>\n<h2>General</h2>\n<p>The most important library is <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl.html\">intl</a>. It defines the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html\">Intl</a>\nclass, with the default locale and methods for accessing most of the\ninternationalization mechanisms. This library also defines the\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>, <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/NumberFormat.html\">NumberFormat</a>, and\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html\">BidiFormatter</a> classes.</p>\n<h2>Current locale</h2>\n<p>The package has a single current locale, called <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#defaultLocale\">defaultLocale</a>.\nOperations will use that locale unless told to do otherwise.</p>\n<p>To set the global locale, you can explicitly set it, e.g.</p>\n<pre><code>  Intl.defaultLocale = 'pt_BR';\n</code></pre>\n<p>or get it from the browser by</p>\n<pre><code>  import \"package:intl/intl_browser.dart\";\n  ...\n  findSystemLocale().then(runTheRestOfMyProgram);\n</code></pre>\n<p>To temporarily override the current locale, pass the operation\nto <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#withLocale\">withLocale</a>.</p>\n<pre><code>  Intl.withLocale('fr', () =&gt; print(myLocalizedMessage());\n</code></pre>\n<p>To override it for a very specific operation you can create a format object in\na specific locale, or pass in the locale as a parameter to methods.</p>\n<pre><code>  var format = new DateFormat.yMd(\"ar\");\n  var dateString = format.format(new DateTime.now());\n  print(myMessage(dateString, locale: 'ar');\n</code></pre>\n<h2>Initialization</h2>\n<p>All the different types of locale data require an async initialization step\nto make\nsure the data is available. This reduces the size of the application by only\nloading the\ndata that is actually required. However, deferred loading does not yet work for\nmultiple\nlibraries, so currently all the code will be included anyay, increasing the code\nsize in the short term.</p>\n<p>Each different area of internationalization (messages, dates, numbers) requires\na separate initialization process. That way, if the application only needs to\nformat dates, it doesn't need to take the time or space to load up messages,\nnumbers, or other things it may not need.</p>\n<p>With messages, there is also a need to import a file that won't exist until\nthe code generation step has been run. This can be awkward, but can be worked\naround by creating a stub <code>messages_all.dart</code> file, running an empty translation\nstep, or commenting out the import until translations are available.\nSee \"Extracting and Using Translated Messages\"</p>\n<h2>Messages</h2>\n<p>Messages to be localized are written as functions that return the result of\nan <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> call.</p>\n<pre><code>  String continueMessage() =&gt; Intl.message(\n      \"Hit any key to continue\",\n      name: \"continueMessage\",\n      args: [],\n      desc: \"Explains that we will not proceed further until \"\n          \"the user presses a key\");\n  print(continueMessage());\n</code></pre>\n<p>This provides, in addition to the basic message string, a name, a\ndescription for translators, the arguments used in the message, and\nexamples. The <code>name</code> and <code>args</code> parameters are required, and must\nmatch the name and arguments list of the function.  In the future we\nhope to have these provided automatically.</p>\n<p>This can be run in the program before any translation has been done,\nand will just return the message string. It can also be extracted to a\nfile and then be made to return a translated version without modifying\nthe original program. See \"Extracting Messages\" below for more\ndetails.</p>\n<p>The purpose of wrapping the message in a function is to allow it to\nhave parameters which can be used in the result. The message string is\nallowed to use a restricted form of Dart string interpolation, where\nonly the function's parameters can be used, and only in simple\nexpressions. Local variables cannot be used, and neither can\nexpressions with curly braces. Only the message string can have\ninterpolation. The name, desc, args, and examples must be literals and\nnot contain interpolations. Only the args parameter can refer to\nvariables, and it should list exactly the function parameters. If you\nare passing numbers or dates and you want them formatted, you must do\nthe formatting outside the function and pass the formatted string into\nthe message.</p>\n<pre><code>  greetingMessage(name) =&gt; Intl.message(\n      \"Hello $name!\",\n      name: \"greetingMessage\",\n      args: [name],\n      desc: \"Greet the user as they first open the application\",\n      examples: {'name': \"Emily\"});\n  print(greetingMessage('Dan'));\n</code></pre>\n<p>There is one special class of complex expressions allowed in the\nmessage string, for plurals and genders.</p>\n<pre><code>  remainingEmailsMessage(int howMany, String userName) =&gt; \n    Intl.message(\n      \"${Intl.plural(howMany,\n          zero: 'There are no emails left for $userName.',\n          one: 'There is one email left for $userName.',\n          other: 'There are $howMany emails left for $userName.')}\",\n    name: \"remainingEmailsMessage\",\n    args: [howMany, userName],\n    desc: \"How many emails remain after archiving.\",\n    examples: {'number': 42, 'userName': 'Fred'});\n\n  print(remainingEmailsMessage(1, \"Fred\"));\n</code></pre>\n<p>However, since the typical usage for a plural or gender is for it to\nbe at the top-level, we can also omit the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> call and\nprovide its parameters to the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#plural\">Intl.plural</a> call instead.</p>\n<pre><code>  remainingEmailsMessage(int howMany, String userName) =&gt; \n    Intl.plural(\n      howMany,\n      zero: 'There are no emails left for $userName.',\n      one: 'There is one email left for $userName.',\n      other: 'There are $howMany emails left for $userName.'),\n      name: \"remainingEmailsMessage\",\n      args: [howMany, userName],\n      desc: \"How many emails remain after archiving.\",\n      examples: {'number': 42, 'userName': 'Fred'});\n</code></pre>\n<p>Similarly, there is an <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#gender\">Intl.gender</a> message, and plurals\nand genders can be nested.</p>\n<pre><code>  notOnlineMessage(String userName, String userGender) =&gt; \n    Intl.gender(\n      userGender,\n      male: '$userName is unavailable because he is not online.',\n      female: '$userName is unavailable because she is not online.',\n      other: '$userName is unavailable because they are not online'),\n      name: \"notOnlineMessage\",\n      args: [userName, userGender],\n      desc: \"The user is not available to hangout.\",\n      examples: {{'userGender': 'male', 'userName': 'Fred'},\n          {'userGender': 'female', 'userName' : 'Alice'}});\n</code></pre>\n<h2>Extracting And Using Translated Messages</h2>\n<p>When your program contains messages that need translation, these must\nbe extracted from the program source, sent to human translators, and the\nresults need to be incorporated. This is still work in progress, and\nthe extraction is done to a custom JSON format that is not supported\nby translation tools. We intend to support one or more actual\ntranslation file formats.</p>\n<p>To extract messages, run the <code>pkg/intl/test/extract_to_json.dart</code> program.</p>\n<pre><code>  dart extract_to_json.dart --output-dir=target/directory\n      my_program.dart more_of_my_program.dart\n</code></pre>\n<p>This will produce a file <code>intl_messages.json</code> with the messages from\nall of these programs. This is in a simple JSON format with a map from\nmessage names to message strings.</p>\n<p>The reverse step expects to receive a series of files, one per\nlocale. These consist of a map with the entry for \"_locale\" indicating\nthe locale, and with the function name mapped to the translated\nstring. However, plurals and genders are currently represented in an\nopaque form, by serializing the internal objects that represent\nthem. You can see the generation of this code in the\n<code>make_hardcoded_translation.dart</code> test file.</p>\n<p>If you manage to create such a set of input files, then you can run</p>\n<pre><code>  dart generate_from_json.dart --generated_file_prefix=&lt;prefix&gt; \n      &lt;my dart files&gt; &lt;translated json files&gt;\n</code></pre>\n<p>This will generate Dart libraries, one per locale, which contain the\ntranslated versions. Your Dart libraries can import the primary file,\nnamed <code>&lt;prefix&gt;messages_all.dart</code>, and then call the initialization\nfor a specific locale. Once that's done, any\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> calls made in the context of that locale\nwill automatically print the translated version instead of the\noriginal.</p>\n<pre><code>  import \"my_prefix_messages_all.dart\";\n  ...\n  initializeMessages(\"dk\").then(printSomeMessages);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nmessage data is available.</p>\n<h2>Number Formatting and Parsing</h2>\n<p>To format a number, create a NumberFormat instance.</p>\n<pre><code>  var f = new NumberFormat(\"###.0#\", \"en_US\");\n  print(f.format(12.345));\n    ==&gt; 12.34\n</code></pre>\n<p>The locale parameter is optional. If omitted, then it will use the\ncurrent locale. The format string is as described in\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/NumberFormat.html\">NumberFormat</a></p>\n<p>It's also possible to access the number symbol data for the current\nlocale, which provides information as to the various separator\ncharacters, patterns, and other information used for formatting, as</p>\n<pre><code>  f.symbols\n</code></pre>\n<p>Current known limitations are that the currency format will only print\nthe name of the currency, and does not support currency symbols, and\nthat the scientific format does not really agree with scientific\nnotation. Number parsing is not yet implemented.</p>\n<p>Note that before doing any number formatting for a particular locale\nyou must load the appropriate data by calling</p>\n<pre><code>  import 'package:intl/number_symbols_data_local.dart';\n  ...\n  initializeNumberFormatting(localeName, null).then(formatNumbers);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nformatting data is available. Note that right now this includes all\nthe data for a locales. We expect to make this use deferred loading to\nreduce code size.</p>\n<h2>Date Formatting and Parsing</h2>\n<p>To format a <a href=\"https://api.dartlang.org/docs/channels/stable/latest/dart_core/DateTime.html\">DateTime</a>, create a <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>\ninstance. These can be created using a set of commonly used skeletons\ntaken from ICU/CLDR or using an explicit pattern. For details on the\nsupported skeletons and patterns see <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>.</p>\n<pre><code>  new DateFormat.yMMMMEEEEd().format(aDateTime);\n    ==&gt; 'Wednesday, January 10, 2012'\n  new DateFormat(\"EEEEE\", \"en_US\").format(aDateTime);\n    ==&gt; 'Wednesday'\n  new DateFormat(\"EEEEE\", \"ln\").format(aDateTime);\n    ==&gt; 'mokɔlɔ mwa mísáto'\n</code></pre>\n<p>You can also parse dates using the same skeletons or patterns.</p>\n<pre><code>    new DateFormat.yMd(\"en_US\").parse(\"1/10/2012\");\n    new DateFormat(\"Hms\", \"en_US\").parse('14:23:01');\n</code></pre>\n<p>Skeletons can be combined, the main use being to print a full date and\ntime, e.g.</p>\n<pre><code>    new DateFormat.yMEd().add_jms().format(new DateTime.now());\n      ==&gt; 'Thu, 5/23/2013 10:21:47 AM'\n</code></pre>\n<p>Known limitations: Time zones are not yet supported. Dart\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/dart_core/DateTime.html\">DateTime</a> objects don't have a time zone, so are either\nlocal or UTC. Formatting and parsing Durations is not yet implemented.</p>\n<p>Note that before doing any DateTime formatting for a particular\nlocale, you must load the appropriate data by calling.</p>\n<pre><code>    import 'package:intl/date_symbol_data_local.dart';\n    ...\n    initializeDateFormatting(\"de_DE\", null).then(formatDates);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nformatting data is available.</p>\n<p>There are other mechanisms for loading the date formatting data\nimplemented, but we expect to deprecate those in favor of having the\ndata in a library as in the above, and using deferred loading to only\nload the portions that are needed. For the time being, this will\ninclude all of the data, which will increase code size.</p>\n<h2>Bidirectional Text</h2>\n<p>The class <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html\">BidiFormatter</a> provides utilities for\nworking with Bidirectional text. We can wrap the string with unicode\ndirectional indicator characters or with an HTML span to indicate\ndirection. The direction can be specified with the\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html#RTL\">RTL</a> and <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html#LTR\">LTR</a> constructors, or\ndetected from the text.</p>\n<pre><code>    new BidiFormatter.RTL().wrapWithUnicode('xyz');\n    new BidiFormatter.RTL().wrapWithSpan('xyz');\n</code></pre>"},{"name":"date_symbol_data","qualifiedName":"intl/date_symbol_data","preview":"<p>Date/time formatting symbols for all locales.</p>","packageName":"intl","packageIntro":"<h1>Intl</h1>\n<p>This package provides internationalization and localization facilities,\nincluding message translation, plurals and genders, date/number formatting\nand parsing, and bidirectional text.</p>\n<h2>General</h2>\n<p>The most important library is <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl.html\">intl</a>. It defines the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html\">Intl</a>\nclass, with the default locale and methods for accessing most of the\ninternationalization mechanisms. This library also defines the\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>, <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/NumberFormat.html\">NumberFormat</a>, and\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html\">BidiFormatter</a> classes.</p>\n<h2>Current locale</h2>\n<p>The package has a single current locale, called <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#defaultLocale\">defaultLocale</a>.\nOperations will use that locale unless told to do otherwise.</p>\n<p>To set the global locale, you can explicitly set it, e.g.</p>\n<pre><code>  Intl.defaultLocale = 'pt_BR';\n</code></pre>\n<p>or get it from the browser by</p>\n<pre><code>  import \"package:intl/intl_browser.dart\";\n  ...\n  findSystemLocale().then(runTheRestOfMyProgram);\n</code></pre>\n<p>To temporarily override the current locale, pass the operation\nto <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#withLocale\">withLocale</a>.</p>\n<pre><code>  Intl.withLocale('fr', () =&gt; print(myLocalizedMessage());\n</code></pre>\n<p>To override it for a very specific operation you can create a format object in\na specific locale, or pass in the locale as a parameter to methods.</p>\n<pre><code>  var format = new DateFormat.yMd(\"ar\");\n  var dateString = format.format(new DateTime.now());\n  print(myMessage(dateString, locale: 'ar');\n</code></pre>\n<h2>Initialization</h2>\n<p>All the different types of locale data require an async initialization step\nto make\nsure the data is available. This reduces the size of the application by only\nloading the\ndata that is actually required. However, deferred loading does not yet work for\nmultiple\nlibraries, so currently all the code will be included anyay, increasing the code\nsize in the short term.</p>\n<p>Each different area of internationalization (messages, dates, numbers) requires\na separate initialization process. That way, if the application only needs to\nformat dates, it doesn't need to take the time or space to load up messages,\nnumbers, or other things it may not need.</p>\n<p>With messages, there is also a need to import a file that won't exist until\nthe code generation step has been run. This can be awkward, but can be worked\naround by creating a stub <code>messages_all.dart</code> file, running an empty translation\nstep, or commenting out the import until translations are available.\nSee \"Extracting and Using Translated Messages\"</p>\n<h2>Messages</h2>\n<p>Messages to be localized are written as functions that return the result of\nan <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> call.</p>\n<pre><code>  String continueMessage() =&gt; Intl.message(\n      \"Hit any key to continue\",\n      name: \"continueMessage\",\n      args: [],\n      desc: \"Explains that we will not proceed further until \"\n          \"the user presses a key\");\n  print(continueMessage());\n</code></pre>\n<p>This provides, in addition to the basic message string, a name, a\ndescription for translators, the arguments used in the message, and\nexamples. The <code>name</code> and <code>args</code> parameters are required, and must\nmatch the name and arguments list of the function.  In the future we\nhope to have these provided automatically.</p>\n<p>This can be run in the program before any translation has been done,\nand will just return the message string. It can also be extracted to a\nfile and then be made to return a translated version without modifying\nthe original program. See \"Extracting Messages\" below for more\ndetails.</p>\n<p>The purpose of wrapping the message in a function is to allow it to\nhave parameters which can be used in the result. The message string is\nallowed to use a restricted form of Dart string interpolation, where\nonly the function's parameters can be used, and only in simple\nexpressions. Local variables cannot be used, and neither can\nexpressions with curly braces. Only the message string can have\ninterpolation. The name, desc, args, and examples must be literals and\nnot contain interpolations. Only the args parameter can refer to\nvariables, and it should list exactly the function parameters. If you\nare passing numbers or dates and you want them formatted, you must do\nthe formatting outside the function and pass the formatted string into\nthe message.</p>\n<pre><code>  greetingMessage(name) =&gt; Intl.message(\n      \"Hello $name!\",\n      name: \"greetingMessage\",\n      args: [name],\n      desc: \"Greet the user as they first open the application\",\n      examples: {'name': \"Emily\"});\n  print(greetingMessage('Dan'));\n</code></pre>\n<p>There is one special class of complex expressions allowed in the\nmessage string, for plurals and genders.</p>\n<pre><code>  remainingEmailsMessage(int howMany, String userName) =&gt; \n    Intl.message(\n      \"${Intl.plural(howMany,\n          zero: 'There are no emails left for $userName.',\n          one: 'There is one email left for $userName.',\n          other: 'There are $howMany emails left for $userName.')}\",\n    name: \"remainingEmailsMessage\",\n    args: [howMany, userName],\n    desc: \"How many emails remain after archiving.\",\n    examples: {'number': 42, 'userName': 'Fred'});\n\n  print(remainingEmailsMessage(1, \"Fred\"));\n</code></pre>\n<p>However, since the typical usage for a plural or gender is for it to\nbe at the top-level, we can also omit the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> call and\nprovide its parameters to the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#plural\">Intl.plural</a> call instead.</p>\n<pre><code>  remainingEmailsMessage(int howMany, String userName) =&gt; \n    Intl.plural(\n      howMany,\n      zero: 'There are no emails left for $userName.',\n      one: 'There is one email left for $userName.',\n      other: 'There are $howMany emails left for $userName.'),\n      name: \"remainingEmailsMessage\",\n      args: [howMany, userName],\n      desc: \"How many emails remain after archiving.\",\n      examples: {'number': 42, 'userName': 'Fred'});\n</code></pre>\n<p>Similarly, there is an <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#gender\">Intl.gender</a> message, and plurals\nand genders can be nested.</p>\n<pre><code>  notOnlineMessage(String userName, String userGender) =&gt; \n    Intl.gender(\n      userGender,\n      male: '$userName is unavailable because he is not online.',\n      female: '$userName is unavailable because she is not online.',\n      other: '$userName is unavailable because they are not online'),\n      name: \"notOnlineMessage\",\n      args: [userName, userGender],\n      desc: \"The user is not available to hangout.\",\n      examples: {{'userGender': 'male', 'userName': 'Fred'},\n          {'userGender': 'female', 'userName' : 'Alice'}});\n</code></pre>\n<h2>Extracting And Using Translated Messages</h2>\n<p>When your program contains messages that need translation, these must\nbe extracted from the program source, sent to human translators, and the\nresults need to be incorporated. This is still work in progress, and\nthe extraction is done to a custom JSON format that is not supported\nby translation tools. We intend to support one or more actual\ntranslation file formats.</p>\n<p>To extract messages, run the <code>pkg/intl/test/extract_to_json.dart</code> program.</p>\n<pre><code>  dart extract_to_json.dart --output-dir=target/directory\n      my_program.dart more_of_my_program.dart\n</code></pre>\n<p>This will produce a file <code>intl_messages.json</code> with the messages from\nall of these programs. This is in a simple JSON format with a map from\nmessage names to message strings.</p>\n<p>The reverse step expects to receive a series of files, one per\nlocale. These consist of a map with the entry for \"_locale\" indicating\nthe locale, and with the function name mapped to the translated\nstring. However, plurals and genders are currently represented in an\nopaque form, by serializing the internal objects that represent\nthem. You can see the generation of this code in the\n<code>make_hardcoded_translation.dart</code> test file.</p>\n<p>If you manage to create such a set of input files, then you can run</p>\n<pre><code>  dart generate_from_json.dart --generated_file_prefix=&lt;prefix&gt; \n      &lt;my dart files&gt; &lt;translated json files&gt;\n</code></pre>\n<p>This will generate Dart libraries, one per locale, which contain the\ntranslated versions. Your Dart libraries can import the primary file,\nnamed <code>&lt;prefix&gt;messages_all.dart</code>, and then call the initialization\nfor a specific locale. Once that's done, any\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> calls made in the context of that locale\nwill automatically print the translated version instead of the\noriginal.</p>\n<pre><code>  import \"my_prefix_messages_all.dart\";\n  ...\n  initializeMessages(\"dk\").then(printSomeMessages);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nmessage data is available.</p>\n<h2>Number Formatting and Parsing</h2>\n<p>To format a number, create a NumberFormat instance.</p>\n<pre><code>  var f = new NumberFormat(\"###.0#\", \"en_US\");\n  print(f.format(12.345));\n    ==&gt; 12.34\n</code></pre>\n<p>The locale parameter is optional. If omitted, then it will use the\ncurrent locale. The format string is as described in\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/NumberFormat.html\">NumberFormat</a></p>\n<p>It's also possible to access the number symbol data for the current\nlocale, which provides information as to the various separator\ncharacters, patterns, and other information used for formatting, as</p>\n<pre><code>  f.symbols\n</code></pre>\n<p>Current known limitations are that the currency format will only print\nthe name of the currency, and does not support currency symbols, and\nthat the scientific format does not really agree with scientific\nnotation. Number parsing is not yet implemented.</p>\n<p>Note that before doing any number formatting for a particular locale\nyou must load the appropriate data by calling</p>\n<pre><code>  import 'package:intl/number_symbols_data_local.dart';\n  ...\n  initializeNumberFormatting(localeName, null).then(formatNumbers);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nformatting data is available. Note that right now this includes all\nthe data for a locales. We expect to make this use deferred loading to\nreduce code size.</p>\n<h2>Date Formatting and Parsing</h2>\n<p>To format a <a href=\"https://api.dartlang.org/docs/channels/stable/latest/dart_core/DateTime.html\">DateTime</a>, create a <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>\ninstance. These can be created using a set of commonly used skeletons\ntaken from ICU/CLDR or using an explicit pattern. For details on the\nsupported skeletons and patterns see <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>.</p>\n<pre><code>  new DateFormat.yMMMMEEEEd().format(aDateTime);\n    ==&gt; 'Wednesday, January 10, 2012'\n  new DateFormat(\"EEEEE\", \"en_US\").format(aDateTime);\n    ==&gt; 'Wednesday'\n  new DateFormat(\"EEEEE\", \"ln\").format(aDateTime);\n    ==&gt; 'mokɔlɔ mwa mísáto'\n</code></pre>\n<p>You can also parse dates using the same skeletons or patterns.</p>\n<pre><code>    new DateFormat.yMd(\"en_US\").parse(\"1/10/2012\");\n    new DateFormat(\"Hms\", \"en_US\").parse('14:23:01');\n</code></pre>\n<p>Skeletons can be combined, the main use being to print a full date and\ntime, e.g.</p>\n<pre><code>    new DateFormat.yMEd().add_jms().format(new DateTime.now());\n      ==&gt; 'Thu, 5/23/2013 10:21:47 AM'\n</code></pre>\n<p>Known limitations: Time zones are not yet supported. Dart\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/dart_core/DateTime.html\">DateTime</a> objects don't have a time zone, so are either\nlocal or UTC. Formatting and parsing Durations is not yet implemented.</p>\n<p>Note that before doing any DateTime formatting for a particular\nlocale, you must load the appropriate data by calling.</p>\n<pre><code>    import 'package:intl/date_symbol_data_local.dart';\n    ...\n    initializeDateFormatting(\"de_DE\", null).then(formatDates);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nformatting data is available.</p>\n<p>There are other mechanisms for loading the date formatting data\nimplemented, but we expect to deprecate those in favor of having the\ndata in a library as in the above, and using deferred loading to only\nload the portions that are needed. For the time being, this will\ninclude all of the data, which will increase code size.</p>\n<h2>Bidirectional Text</h2>\n<p>The class <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html\">BidiFormatter</a> provides utilities for\nworking with Bidirectional text. We can wrap the string with unicode\ndirectional indicator characters or with an HTML span to indicate\ndirection. The direction can be specified with the\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html#RTL\">RTL</a> and <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html#LTR\">LTR</a> constructors, or\ndetected from the text.</p>\n<pre><code>    new BidiFormatter.RTL().wrapWithUnicode('xyz');\n    new BidiFormatter.RTL().wrapWithSpan('xyz');\n</code></pre>"},{"name":"extract_messages","qualifiedName":"intl/extract_messages","preview":"<p>This is for use in extracting messages from a Dart program\nusing the Intl.message() mechanism and writing them to a file for\ntranslation. This provides only the stub of a mechanism, because it\ndoesn't define how the file should be written. It provides an\nIntlMessage class that holds the extracted data and parseString\nand <a>intl/extract_messages.parseFile</a> methods which\ncan extract messages that conform to the expected pattern:</p>","packageName":"intl","packageIntro":"<h1>Intl</h1>\n<p>This package provides internationalization and localization facilities,\nincluding message translation, plurals and genders, date/number formatting\nand parsing, and bidirectional text.</p>\n<h2>General</h2>\n<p>The most important library is <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl.html\">intl</a>. It defines the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html\">Intl</a>\nclass, with the default locale and methods for accessing most of the\ninternationalization mechanisms. This library also defines the\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>, <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/NumberFormat.html\">NumberFormat</a>, and\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html\">BidiFormatter</a> classes.</p>\n<h2>Current locale</h2>\n<p>The package has a single current locale, called <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#defaultLocale\">defaultLocale</a>.\nOperations will use that locale unless told to do otherwise.</p>\n<p>To set the global locale, you can explicitly set it, e.g.</p>\n<pre><code>  Intl.defaultLocale = 'pt_BR';\n</code></pre>\n<p>or get it from the browser by</p>\n<pre><code>  import \"package:intl/intl_browser.dart\";\n  ...\n  findSystemLocale().then(runTheRestOfMyProgram);\n</code></pre>\n<p>To temporarily override the current locale, pass the operation\nto <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#withLocale\">withLocale</a>.</p>\n<pre><code>  Intl.withLocale('fr', () =&gt; print(myLocalizedMessage());\n</code></pre>\n<p>To override it for a very specific operation you can create a format object in\na specific locale, or pass in the locale as a parameter to methods.</p>\n<pre><code>  var format = new DateFormat.yMd(\"ar\");\n  var dateString = format.format(new DateTime.now());\n  print(myMessage(dateString, locale: 'ar');\n</code></pre>\n<h2>Initialization</h2>\n<p>All the different types of locale data require an async initialization step\nto make\nsure the data is available. This reduces the size of the application by only\nloading the\ndata that is actually required. However, deferred loading does not yet work for\nmultiple\nlibraries, so currently all the code will be included anyay, increasing the code\nsize in the short term.</p>\n<p>Each different area of internationalization (messages, dates, numbers) requires\na separate initialization process. That way, if the application only needs to\nformat dates, it doesn't need to take the time or space to load up messages,\nnumbers, or other things it may not need.</p>\n<p>With messages, there is also a need to import a file that won't exist until\nthe code generation step has been run. This can be awkward, but can be worked\naround by creating a stub <code>messages_all.dart</code> file, running an empty translation\nstep, or commenting out the import until translations are available.\nSee \"Extracting and Using Translated Messages\"</p>\n<h2>Messages</h2>\n<p>Messages to be localized are written as functions that return the result of\nan <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> call.</p>\n<pre><code>  String continueMessage() =&gt; Intl.message(\n      \"Hit any key to continue\",\n      name: \"continueMessage\",\n      args: [],\n      desc: \"Explains that we will not proceed further until \"\n          \"the user presses a key\");\n  print(continueMessage());\n</code></pre>\n<p>This provides, in addition to the basic message string, a name, a\ndescription for translators, the arguments used in the message, and\nexamples. The <code>name</code> and <code>args</code> parameters are required, and must\nmatch the name and arguments list of the function.  In the future we\nhope to have these provided automatically.</p>\n<p>This can be run in the program before any translation has been done,\nand will just return the message string. It can also be extracted to a\nfile and then be made to return a translated version without modifying\nthe original program. See \"Extracting Messages\" below for more\ndetails.</p>\n<p>The purpose of wrapping the message in a function is to allow it to\nhave parameters which can be used in the result. The message string is\nallowed to use a restricted form of Dart string interpolation, where\nonly the function's parameters can be used, and only in simple\nexpressions. Local variables cannot be used, and neither can\nexpressions with curly braces. Only the message string can have\ninterpolation. The name, desc, args, and examples must be literals and\nnot contain interpolations. Only the args parameter can refer to\nvariables, and it should list exactly the function parameters. If you\nare passing numbers or dates and you want them formatted, you must do\nthe formatting outside the function and pass the formatted string into\nthe message.</p>\n<pre><code>  greetingMessage(name) =&gt; Intl.message(\n      \"Hello $name!\",\n      name: \"greetingMessage\",\n      args: [name],\n      desc: \"Greet the user as they first open the application\",\n      examples: {'name': \"Emily\"});\n  print(greetingMessage('Dan'));\n</code></pre>\n<p>There is one special class of complex expressions allowed in the\nmessage string, for plurals and genders.</p>\n<pre><code>  remainingEmailsMessage(int howMany, String userName) =&gt; \n    Intl.message(\n      \"${Intl.plural(howMany,\n          zero: 'There are no emails left for $userName.',\n          one: 'There is one email left for $userName.',\n          other: 'There are $howMany emails left for $userName.')}\",\n    name: \"remainingEmailsMessage\",\n    args: [howMany, userName],\n    desc: \"How many emails remain after archiving.\",\n    examples: {'number': 42, 'userName': 'Fred'});\n\n  print(remainingEmailsMessage(1, \"Fred\"));\n</code></pre>\n<p>However, since the typical usage for a plural or gender is for it to\nbe at the top-level, we can also omit the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> call and\nprovide its parameters to the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#plural\">Intl.plural</a> call instead.</p>\n<pre><code>  remainingEmailsMessage(int howMany, String userName) =&gt; \n    Intl.plural(\n      howMany,\n      zero: 'There are no emails left for $userName.',\n      one: 'There is one email left for $userName.',\n      other: 'There are $howMany emails left for $userName.'),\n      name: \"remainingEmailsMessage\",\n      args: [howMany, userName],\n      desc: \"How many emails remain after archiving.\",\n      examples: {'number': 42, 'userName': 'Fred'});\n</code></pre>\n<p>Similarly, there is an <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#gender\">Intl.gender</a> message, and plurals\nand genders can be nested.</p>\n<pre><code>  notOnlineMessage(String userName, String userGender) =&gt; \n    Intl.gender(\n      userGender,\n      male: '$userName is unavailable because he is not online.',\n      female: '$userName is unavailable because she is not online.',\n      other: '$userName is unavailable because they are not online'),\n      name: \"notOnlineMessage\",\n      args: [userName, userGender],\n      desc: \"The user is not available to hangout.\",\n      examples: {{'userGender': 'male', 'userName': 'Fred'},\n          {'userGender': 'female', 'userName' : 'Alice'}});\n</code></pre>\n<h2>Extracting And Using Translated Messages</h2>\n<p>When your program contains messages that need translation, these must\nbe extracted from the program source, sent to human translators, and the\nresults need to be incorporated. This is still work in progress, and\nthe extraction is done to a custom JSON format that is not supported\nby translation tools. We intend to support one or more actual\ntranslation file formats.</p>\n<p>To extract messages, run the <code>pkg/intl/test/extract_to_json.dart</code> program.</p>\n<pre><code>  dart extract_to_json.dart --output-dir=target/directory\n      my_program.dart more_of_my_program.dart\n</code></pre>\n<p>This will produce a file <code>intl_messages.json</code> with the messages from\nall of these programs. This is in a simple JSON format with a map from\nmessage names to message strings.</p>\n<p>The reverse step expects to receive a series of files, one per\nlocale. These consist of a map with the entry for \"_locale\" indicating\nthe locale, and with the function name mapped to the translated\nstring. However, plurals and genders are currently represented in an\nopaque form, by serializing the internal objects that represent\nthem. You can see the generation of this code in the\n<code>make_hardcoded_translation.dart</code> test file.</p>\n<p>If you manage to create such a set of input files, then you can run</p>\n<pre><code>  dart generate_from_json.dart --generated_file_prefix=&lt;prefix&gt; \n      &lt;my dart files&gt; &lt;translated json files&gt;\n</code></pre>\n<p>This will generate Dart libraries, one per locale, which contain the\ntranslated versions. Your Dart libraries can import the primary file,\nnamed <code>&lt;prefix&gt;messages_all.dart</code>, and then call the initialization\nfor a specific locale. Once that's done, any\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> calls made in the context of that locale\nwill automatically print the translated version instead of the\noriginal.</p>\n<pre><code>  import \"my_prefix_messages_all.dart\";\n  ...\n  initializeMessages(\"dk\").then(printSomeMessages);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nmessage data is available.</p>\n<h2>Number Formatting and Parsing</h2>\n<p>To format a number, create a NumberFormat instance.</p>\n<pre><code>  var f = new NumberFormat(\"###.0#\", \"en_US\");\n  print(f.format(12.345));\n    ==&gt; 12.34\n</code></pre>\n<p>The locale parameter is optional. If omitted, then it will use the\ncurrent locale. The format string is as described in\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/NumberFormat.html\">NumberFormat</a></p>\n<p>It's also possible to access the number symbol data for the current\nlocale, which provides information as to the various separator\ncharacters, patterns, and other information used for formatting, as</p>\n<pre><code>  f.symbols\n</code></pre>\n<p>Current known limitations are that the currency format will only print\nthe name of the currency, and does not support currency symbols, and\nthat the scientific format does not really agree with scientific\nnotation. Number parsing is not yet implemented.</p>\n<p>Note that before doing any number formatting for a particular locale\nyou must load the appropriate data by calling</p>\n<pre><code>  import 'package:intl/number_symbols_data_local.dart';\n  ...\n  initializeNumberFormatting(localeName, null).then(formatNumbers);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nformatting data is available. Note that right now this includes all\nthe data for a locales. We expect to make this use deferred loading to\nreduce code size.</p>\n<h2>Date Formatting and Parsing</h2>\n<p>To format a <a href=\"https://api.dartlang.org/docs/channels/stable/latest/dart_core/DateTime.html\">DateTime</a>, create a <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>\ninstance. These can be created using a set of commonly used skeletons\ntaken from ICU/CLDR or using an explicit pattern. For details on the\nsupported skeletons and patterns see <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>.</p>\n<pre><code>  new DateFormat.yMMMMEEEEd().format(aDateTime);\n    ==&gt; 'Wednesday, January 10, 2012'\n  new DateFormat(\"EEEEE\", \"en_US\").format(aDateTime);\n    ==&gt; 'Wednesday'\n  new DateFormat(\"EEEEE\", \"ln\").format(aDateTime);\n    ==&gt; 'mokɔlɔ mwa mísáto'\n</code></pre>\n<p>You can also parse dates using the same skeletons or patterns.</p>\n<pre><code>    new DateFormat.yMd(\"en_US\").parse(\"1/10/2012\");\n    new DateFormat(\"Hms\", \"en_US\").parse('14:23:01');\n</code></pre>\n<p>Skeletons can be combined, the main use being to print a full date and\ntime, e.g.</p>\n<pre><code>    new DateFormat.yMEd().add_jms().format(new DateTime.now());\n      ==&gt; 'Thu, 5/23/2013 10:21:47 AM'\n</code></pre>\n<p>Known limitations: Time zones are not yet supported. Dart\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/dart_core/DateTime.html\">DateTime</a> objects don't have a time zone, so are either\nlocal or UTC. Formatting and parsing Durations is not yet implemented.</p>\n<p>Note that before doing any DateTime formatting for a particular\nlocale, you must load the appropriate data by calling.</p>\n<pre><code>    import 'package:intl/date_symbol_data_local.dart';\n    ...\n    initializeDateFormatting(\"de_DE\", null).then(formatDates);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nformatting data is available.</p>\n<p>There are other mechanisms for loading the date formatting data\nimplemented, but we expect to deprecate those in favor of having the\ndata in a library as in the above, and using deferred loading to only\nload the portions that are needed. For the time being, this will\ninclude all of the data, which will increase code size.</p>\n<h2>Bidirectional Text</h2>\n<p>The class <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html\">BidiFormatter</a> provides utilities for\nworking with Bidirectional text. We can wrap the string with unicode\ndirectional indicator characters or with an HTML span to indicate\ndirection. The direction can be specified with the\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html#RTL\">RTL</a> and <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html#LTR\">LTR</a> constructors, or\ndetected from the text.</p>\n<pre><code>    new BidiFormatter.RTL().wrapWithUnicode('xyz');\n    new BidiFormatter.RTL().wrapWithSpan('xyz');\n</code></pre>"},{"name":"message_lookup_by_library","qualifiedName":"intl/message_lookup_by_library","preview":"<p>Message/plural format library with locale support. This can have different\nimplementations based on the mechanism for finding the localized versions\nof messages. This version expects them to be in a library named e.g.\n'messages<em>en</em>US'. The prefix is set in the \"initializeMessages\" call, which\nmust be made for a locale before any lookups can be done.</p>","packageName":"intl","packageIntro":"<h1>Intl</h1>\n<p>This package provides internationalization and localization facilities,\nincluding message translation, plurals and genders, date/number formatting\nand parsing, and bidirectional text.</p>\n<h2>General</h2>\n<p>The most important library is <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl.html\">intl</a>. It defines the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html\">Intl</a>\nclass, with the default locale and methods for accessing most of the\ninternationalization mechanisms. This library also defines the\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>, <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/NumberFormat.html\">NumberFormat</a>, and\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html\">BidiFormatter</a> classes.</p>\n<h2>Current locale</h2>\n<p>The package has a single current locale, called <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#defaultLocale\">defaultLocale</a>.\nOperations will use that locale unless told to do otherwise.</p>\n<p>To set the global locale, you can explicitly set it, e.g.</p>\n<pre><code>  Intl.defaultLocale = 'pt_BR';\n</code></pre>\n<p>or get it from the browser by</p>\n<pre><code>  import \"package:intl/intl_browser.dart\";\n  ...\n  findSystemLocale().then(runTheRestOfMyProgram);\n</code></pre>\n<p>To temporarily override the current locale, pass the operation\nto <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#withLocale\">withLocale</a>.</p>\n<pre><code>  Intl.withLocale('fr', () =&gt; print(myLocalizedMessage());\n</code></pre>\n<p>To override it for a very specific operation you can create a format object in\na specific locale, or pass in the locale as a parameter to methods.</p>\n<pre><code>  var format = new DateFormat.yMd(\"ar\");\n  var dateString = format.format(new DateTime.now());\n  print(myMessage(dateString, locale: 'ar');\n</code></pre>\n<h2>Initialization</h2>\n<p>All the different types of locale data require an async initialization step\nto make\nsure the data is available. This reduces the size of the application by only\nloading the\ndata that is actually required. However, deferred loading does not yet work for\nmultiple\nlibraries, so currently all the code will be included anyay, increasing the code\nsize in the short term.</p>\n<p>Each different area of internationalization (messages, dates, numbers) requires\na separate initialization process. That way, if the application only needs to\nformat dates, it doesn't need to take the time or space to load up messages,\nnumbers, or other things it may not need.</p>\n<p>With messages, there is also a need to import a file that won't exist until\nthe code generation step has been run. This can be awkward, but can be worked\naround by creating a stub <code>messages_all.dart</code> file, running an empty translation\nstep, or commenting out the import until translations are available.\nSee \"Extracting and Using Translated Messages\"</p>\n<h2>Messages</h2>\n<p>Messages to be localized are written as functions that return the result of\nan <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> call.</p>\n<pre><code>  String continueMessage() =&gt; Intl.message(\n      \"Hit any key to continue\",\n      name: \"continueMessage\",\n      args: [],\n      desc: \"Explains that we will not proceed further until \"\n          \"the user presses a key\");\n  print(continueMessage());\n</code></pre>\n<p>This provides, in addition to the basic message string, a name, a\ndescription for translators, the arguments used in the message, and\nexamples. The <code>name</code> and <code>args</code> parameters are required, and must\nmatch the name and arguments list of the function.  In the future we\nhope to have these provided automatically.</p>\n<p>This can be run in the program before any translation has been done,\nand will just return the message string. It can also be extracted to a\nfile and then be made to return a translated version without modifying\nthe original program. See \"Extracting Messages\" below for more\ndetails.</p>\n<p>The purpose of wrapping the message in a function is to allow it to\nhave parameters which can be used in the result. The message string is\nallowed to use a restricted form of Dart string interpolation, where\nonly the function's parameters can be used, and only in simple\nexpressions. Local variables cannot be used, and neither can\nexpressions with curly braces. Only the message string can have\ninterpolation. The name, desc, args, and examples must be literals and\nnot contain interpolations. Only the args parameter can refer to\nvariables, and it should list exactly the function parameters. If you\nare passing numbers or dates and you want them formatted, you must do\nthe formatting outside the function and pass the formatted string into\nthe message.</p>\n<pre><code>  greetingMessage(name) =&gt; Intl.message(\n      \"Hello $name!\",\n      name: \"greetingMessage\",\n      args: [name],\n      desc: \"Greet the user as they first open the application\",\n      examples: {'name': \"Emily\"});\n  print(greetingMessage('Dan'));\n</code></pre>\n<p>There is one special class of complex expressions allowed in the\nmessage string, for plurals and genders.</p>\n<pre><code>  remainingEmailsMessage(int howMany, String userName) =&gt; \n    Intl.message(\n      \"${Intl.plural(howMany,\n          zero: 'There are no emails left for $userName.',\n          one: 'There is one email left for $userName.',\n          other: 'There are $howMany emails left for $userName.')}\",\n    name: \"remainingEmailsMessage\",\n    args: [howMany, userName],\n    desc: \"How many emails remain after archiving.\",\n    examples: {'number': 42, 'userName': 'Fred'});\n\n  print(remainingEmailsMessage(1, \"Fred\"));\n</code></pre>\n<p>However, since the typical usage for a plural or gender is for it to\nbe at the top-level, we can also omit the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> call and\nprovide its parameters to the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#plural\">Intl.plural</a> call instead.</p>\n<pre><code>  remainingEmailsMessage(int howMany, String userName) =&gt; \n    Intl.plural(\n      howMany,\n      zero: 'There are no emails left for $userName.',\n      one: 'There is one email left for $userName.',\n      other: 'There are $howMany emails left for $userName.'),\n      name: \"remainingEmailsMessage\",\n      args: [howMany, userName],\n      desc: \"How many emails remain after archiving.\",\n      examples: {'number': 42, 'userName': 'Fred'});\n</code></pre>\n<p>Similarly, there is an <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#gender\">Intl.gender</a> message, and plurals\nand genders can be nested.</p>\n<pre><code>  notOnlineMessage(String userName, String userGender) =&gt; \n    Intl.gender(\n      userGender,\n      male: '$userName is unavailable because he is not online.',\n      female: '$userName is unavailable because she is not online.',\n      other: '$userName is unavailable because they are not online'),\n      name: \"notOnlineMessage\",\n      args: [userName, userGender],\n      desc: \"The user is not available to hangout.\",\n      examples: {{'userGender': 'male', 'userName': 'Fred'},\n          {'userGender': 'female', 'userName' : 'Alice'}});\n</code></pre>\n<h2>Extracting And Using Translated Messages</h2>\n<p>When your program contains messages that need translation, these must\nbe extracted from the program source, sent to human translators, and the\nresults need to be incorporated. This is still work in progress, and\nthe extraction is done to a custom JSON format that is not supported\nby translation tools. We intend to support one or more actual\ntranslation file formats.</p>\n<p>To extract messages, run the <code>pkg/intl/test/extract_to_json.dart</code> program.</p>\n<pre><code>  dart extract_to_json.dart --output-dir=target/directory\n      my_program.dart more_of_my_program.dart\n</code></pre>\n<p>This will produce a file <code>intl_messages.json</code> with the messages from\nall of these programs. This is in a simple JSON format with a map from\nmessage names to message strings.</p>\n<p>The reverse step expects to receive a series of files, one per\nlocale. These consist of a map with the entry for \"_locale\" indicating\nthe locale, and with the function name mapped to the translated\nstring. However, plurals and genders are currently represented in an\nopaque form, by serializing the internal objects that represent\nthem. You can see the generation of this code in the\n<code>make_hardcoded_translation.dart</code> test file.</p>\n<p>If you manage to create such a set of input files, then you can run</p>\n<pre><code>  dart generate_from_json.dart --generated_file_prefix=&lt;prefix&gt; \n      &lt;my dart files&gt; &lt;translated json files&gt;\n</code></pre>\n<p>This will generate Dart libraries, one per locale, which contain the\ntranslated versions. Your Dart libraries can import the primary file,\nnamed <code>&lt;prefix&gt;messages_all.dart</code>, and then call the initialization\nfor a specific locale. Once that's done, any\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> calls made in the context of that locale\nwill automatically print the translated version instead of the\noriginal.</p>\n<pre><code>  import \"my_prefix_messages_all.dart\";\n  ...\n  initializeMessages(\"dk\").then(printSomeMessages);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nmessage data is available.</p>\n<h2>Number Formatting and Parsing</h2>\n<p>To format a number, create a NumberFormat instance.</p>\n<pre><code>  var f = new NumberFormat(\"###.0#\", \"en_US\");\n  print(f.format(12.345));\n    ==&gt; 12.34\n</code></pre>\n<p>The locale parameter is optional. If omitted, then it will use the\ncurrent locale. The format string is as described in\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/NumberFormat.html\">NumberFormat</a></p>\n<p>It's also possible to access the number symbol data for the current\nlocale, which provides information as to the various separator\ncharacters, patterns, and other information used for formatting, as</p>\n<pre><code>  f.symbols\n</code></pre>\n<p>Current known limitations are that the currency format will only print\nthe name of the currency, and does not support currency symbols, and\nthat the scientific format does not really agree with scientific\nnotation. Number parsing is not yet implemented.</p>\n<p>Note that before doing any number formatting for a particular locale\nyou must load the appropriate data by calling</p>\n<pre><code>  import 'package:intl/number_symbols_data_local.dart';\n  ...\n  initializeNumberFormatting(localeName, null).then(formatNumbers);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nformatting data is available. Note that right now this includes all\nthe data for a locales. We expect to make this use deferred loading to\nreduce code size.</p>\n<h2>Date Formatting and Parsing</h2>\n<p>To format a <a href=\"https://api.dartlang.org/docs/channels/stable/latest/dart_core/DateTime.html\">DateTime</a>, create a <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>\ninstance. These can be created using a set of commonly used skeletons\ntaken from ICU/CLDR or using an explicit pattern. For details on the\nsupported skeletons and patterns see <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>.</p>\n<pre><code>  new DateFormat.yMMMMEEEEd().format(aDateTime);\n    ==&gt; 'Wednesday, January 10, 2012'\n  new DateFormat(\"EEEEE\", \"en_US\").format(aDateTime);\n    ==&gt; 'Wednesday'\n  new DateFormat(\"EEEEE\", \"ln\").format(aDateTime);\n    ==&gt; 'mokɔlɔ mwa mísáto'\n</code></pre>\n<p>You can also parse dates using the same skeletons or patterns.</p>\n<pre><code>    new DateFormat.yMd(\"en_US\").parse(\"1/10/2012\");\n    new DateFormat(\"Hms\", \"en_US\").parse('14:23:01');\n</code></pre>\n<p>Skeletons can be combined, the main use being to print a full date and\ntime, e.g.</p>\n<pre><code>    new DateFormat.yMEd().add_jms().format(new DateTime.now());\n      ==&gt; 'Thu, 5/23/2013 10:21:47 AM'\n</code></pre>\n<p>Known limitations: Time zones are not yet supported. Dart\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/dart_core/DateTime.html\">DateTime</a> objects don't have a time zone, so are either\nlocal or UTC. Formatting and parsing Durations is not yet implemented.</p>\n<p>Note that before doing any DateTime formatting for a particular\nlocale, you must load the appropriate data by calling.</p>\n<pre><code>    import 'package:intl/date_symbol_data_local.dart';\n    ...\n    initializeDateFormatting(\"de_DE\", null).then(formatDates);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nformatting data is available.</p>\n<p>There are other mechanisms for loading the date formatting data\nimplemented, but we expect to deprecate those in favor of having the\ndata in a library as in the above, and using deferred loading to only\nload the portions that are needed. For the time being, this will\ninclude all of the data, which will increase code size.</p>\n<h2>Bidirectional Text</h2>\n<p>The class <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html\">BidiFormatter</a> provides utilities for\nworking with Bidirectional text. We can wrap the string with unicode\ndirectional indicator characters or with an HTML span to indicate\ndirection. The direction can be specified with the\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html#RTL\">RTL</a> and <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html#LTR\">LTR</a> constructors, or\ndetected from the text.</p>\n<pre><code>    new BidiFormatter.RTL().wrapWithUnicode('xyz');\n    new BidiFormatter.RTL().wrapWithSpan('xyz');\n</code></pre>"},{"name":"generate_localized","qualifiedName":"intl/generate_localized","preview":"<p>This provides utilities for generating localized versions of\nmessages. It does not stand alone, but expects to be given\nTranslatedMessage objects and generate code for a particular locale\nbased on them.</p>","packageName":"intl","packageIntro":"<h1>Intl</h1>\n<p>This package provides internationalization and localization facilities,\nincluding message translation, plurals and genders, date/number formatting\nand parsing, and bidirectional text.</p>\n<h2>General</h2>\n<p>The most important library is <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl.html\">intl</a>. It defines the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html\">Intl</a>\nclass, with the default locale and methods for accessing most of the\ninternationalization mechanisms. This library also defines the\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>, <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/NumberFormat.html\">NumberFormat</a>, and\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html\">BidiFormatter</a> classes.</p>\n<h2>Current locale</h2>\n<p>The package has a single current locale, called <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#defaultLocale\">defaultLocale</a>.\nOperations will use that locale unless told to do otherwise.</p>\n<p>To set the global locale, you can explicitly set it, e.g.</p>\n<pre><code>  Intl.defaultLocale = 'pt_BR';\n</code></pre>\n<p>or get it from the browser by</p>\n<pre><code>  import \"package:intl/intl_browser.dart\";\n  ...\n  findSystemLocale().then(runTheRestOfMyProgram);\n</code></pre>\n<p>To temporarily override the current locale, pass the operation\nto <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#withLocale\">withLocale</a>.</p>\n<pre><code>  Intl.withLocale('fr', () =&gt; print(myLocalizedMessage());\n</code></pre>\n<p>To override it for a very specific operation you can create a format object in\na specific locale, or pass in the locale as a parameter to methods.</p>\n<pre><code>  var format = new DateFormat.yMd(\"ar\");\n  var dateString = format.format(new DateTime.now());\n  print(myMessage(dateString, locale: 'ar');\n</code></pre>\n<h2>Initialization</h2>\n<p>All the different types of locale data require an async initialization step\nto make\nsure the data is available. This reduces the size of the application by only\nloading the\ndata that is actually required. However, deferred loading does not yet work for\nmultiple\nlibraries, so currently all the code will be included anyay, increasing the code\nsize in the short term.</p>\n<p>Each different area of internationalization (messages, dates, numbers) requires\na separate initialization process. That way, if the application only needs to\nformat dates, it doesn't need to take the time or space to load up messages,\nnumbers, or other things it may not need.</p>\n<p>With messages, there is also a need to import a file that won't exist until\nthe code generation step has been run. This can be awkward, but can be worked\naround by creating a stub <code>messages_all.dart</code> file, running an empty translation\nstep, or commenting out the import until translations are available.\nSee \"Extracting and Using Translated Messages\"</p>\n<h2>Messages</h2>\n<p>Messages to be localized are written as functions that return the result of\nan <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> call.</p>\n<pre><code>  String continueMessage() =&gt; Intl.message(\n      \"Hit any key to continue\",\n      name: \"continueMessage\",\n      args: [],\n      desc: \"Explains that we will not proceed further until \"\n          \"the user presses a key\");\n  print(continueMessage());\n</code></pre>\n<p>This provides, in addition to the basic message string, a name, a\ndescription for translators, the arguments used in the message, and\nexamples. The <code>name</code> and <code>args</code> parameters are required, and must\nmatch the name and arguments list of the function.  In the future we\nhope to have these provided automatically.</p>\n<p>This can be run in the program before any translation has been done,\nand will just return the message string. It can also be extracted to a\nfile and then be made to return a translated version without modifying\nthe original program. See \"Extracting Messages\" below for more\ndetails.</p>\n<p>The purpose of wrapping the message in a function is to allow it to\nhave parameters which can be used in the result. The message string is\nallowed to use a restricted form of Dart string interpolation, where\nonly the function's parameters can be used, and only in simple\nexpressions. Local variables cannot be used, and neither can\nexpressions with curly braces. Only the message string can have\ninterpolation. The name, desc, args, and examples must be literals and\nnot contain interpolations. Only the args parameter can refer to\nvariables, and it should list exactly the function parameters. If you\nare passing numbers or dates and you want them formatted, you must do\nthe formatting outside the function and pass the formatted string into\nthe message.</p>\n<pre><code>  greetingMessage(name) =&gt; Intl.message(\n      \"Hello $name!\",\n      name: \"greetingMessage\",\n      args: [name],\n      desc: \"Greet the user as they first open the application\",\n      examples: {'name': \"Emily\"});\n  print(greetingMessage('Dan'));\n</code></pre>\n<p>There is one special class of complex expressions allowed in the\nmessage string, for plurals and genders.</p>\n<pre><code>  remainingEmailsMessage(int howMany, String userName) =&gt; \n    Intl.message(\n      \"${Intl.plural(howMany,\n          zero: 'There are no emails left for $userName.',\n          one: 'There is one email left for $userName.',\n          other: 'There are $howMany emails left for $userName.')}\",\n    name: \"remainingEmailsMessage\",\n    args: [howMany, userName],\n    desc: \"How many emails remain after archiving.\",\n    examples: {'number': 42, 'userName': 'Fred'});\n\n  print(remainingEmailsMessage(1, \"Fred\"));\n</code></pre>\n<p>However, since the typical usage for a plural or gender is for it to\nbe at the top-level, we can also omit the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> call and\nprovide its parameters to the <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#plural\">Intl.plural</a> call instead.</p>\n<pre><code>  remainingEmailsMessage(int howMany, String userName) =&gt; \n    Intl.plural(\n      howMany,\n      zero: 'There are no emails left for $userName.',\n      one: 'There is one email left for $userName.',\n      other: 'There are $howMany emails left for $userName.'),\n      name: \"remainingEmailsMessage\",\n      args: [howMany, userName],\n      desc: \"How many emails remain after archiving.\",\n      examples: {'number': 42, 'userName': 'Fred'});\n</code></pre>\n<p>Similarly, there is an <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#gender\">Intl.gender</a> message, and plurals\nand genders can be nested.</p>\n<pre><code>  notOnlineMessage(String userName, String userGender) =&gt; \n    Intl.gender(\n      userGender,\n      male: '$userName is unavailable because he is not online.',\n      female: '$userName is unavailable because she is not online.',\n      other: '$userName is unavailable because they are not online'),\n      name: \"notOnlineMessage\",\n      args: [userName, userGender],\n      desc: \"The user is not available to hangout.\",\n      examples: {{'userGender': 'male', 'userName': 'Fred'},\n          {'userGender': 'female', 'userName' : 'Alice'}});\n</code></pre>\n<h2>Extracting And Using Translated Messages</h2>\n<p>When your program contains messages that need translation, these must\nbe extracted from the program source, sent to human translators, and the\nresults need to be incorporated. This is still work in progress, and\nthe extraction is done to a custom JSON format that is not supported\nby translation tools. We intend to support one or more actual\ntranslation file formats.</p>\n<p>To extract messages, run the <code>pkg/intl/test/extract_to_json.dart</code> program.</p>\n<pre><code>  dart extract_to_json.dart --output-dir=target/directory\n      my_program.dart more_of_my_program.dart\n</code></pre>\n<p>This will produce a file <code>intl_messages.json</code> with the messages from\nall of these programs. This is in a simple JSON format with a map from\nmessage names to message strings.</p>\n<p>The reverse step expects to receive a series of files, one per\nlocale. These consist of a map with the entry for \"_locale\" indicating\nthe locale, and with the function name mapped to the translated\nstring. However, plurals and genders are currently represented in an\nopaque form, by serializing the internal objects that represent\nthem. You can see the generation of this code in the\n<code>make_hardcoded_translation.dart</code> test file.</p>\n<p>If you manage to create such a set of input files, then you can run</p>\n<pre><code>  dart generate_from_json.dart --generated_file_prefix=&lt;prefix&gt; \n      &lt;my dart files&gt; &lt;translated json files&gt;\n</code></pre>\n<p>This will generate Dart libraries, one per locale, which contain the\ntranslated versions. Your Dart libraries can import the primary file,\nnamed <code>&lt;prefix&gt;messages_all.dart</code>, and then call the initialization\nfor a specific locale. Once that's done, any\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/Intl.html#message\">Intl.message</a> calls made in the context of that locale\nwill automatically print the translated version instead of the\noriginal.</p>\n<pre><code>  import \"my_prefix_messages_all.dart\";\n  ...\n  initializeMessages(\"dk\").then(printSomeMessages);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nmessage data is available.</p>\n<h2>Number Formatting and Parsing</h2>\n<p>To format a number, create a NumberFormat instance.</p>\n<pre><code>  var f = new NumberFormat(\"###.0#\", \"en_US\");\n  print(f.format(12.345));\n    ==&gt; 12.34\n</code></pre>\n<p>The locale parameter is optional. If omitted, then it will use the\ncurrent locale. The format string is as described in\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/NumberFormat.html\">NumberFormat</a></p>\n<p>It's also possible to access the number symbol data for the current\nlocale, which provides information as to the various separator\ncharacters, patterns, and other information used for formatting, as</p>\n<pre><code>  f.symbols\n</code></pre>\n<p>Current known limitations are that the currency format will only print\nthe name of the currency, and does not support currency symbols, and\nthat the scientific format does not really agree with scientific\nnotation. Number parsing is not yet implemented.</p>\n<p>Note that before doing any number formatting for a particular locale\nyou must load the appropriate data by calling</p>\n<pre><code>  import 'package:intl/number_symbols_data_local.dart';\n  ...\n  initializeNumberFormatting(localeName, null).then(formatNumbers);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nformatting data is available. Note that right now this includes all\nthe data for a locales. We expect to make this use deferred loading to\nreduce code size.</p>\n<h2>Date Formatting and Parsing</h2>\n<p>To format a <a href=\"https://api.dartlang.org/docs/channels/stable/latest/dart_core/DateTime.html\">DateTime</a>, create a <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>\ninstance. These can be created using a set of commonly used skeletons\ntaken from ICU/CLDR or using an explicit pattern. For details on the\nsupported skeletons and patterns see <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/DateFormat.html\">DateFormat</a>.</p>\n<pre><code>  new DateFormat.yMMMMEEEEd().format(aDateTime);\n    ==&gt; 'Wednesday, January 10, 2012'\n  new DateFormat(\"EEEEE\", \"en_US\").format(aDateTime);\n    ==&gt; 'Wednesday'\n  new DateFormat(\"EEEEE\", \"ln\").format(aDateTime);\n    ==&gt; 'mokɔlɔ mwa mísáto'\n</code></pre>\n<p>You can also parse dates using the same skeletons or patterns.</p>\n<pre><code>    new DateFormat.yMd(\"en_US\").parse(\"1/10/2012\");\n    new DateFormat(\"Hms\", \"en_US\").parse('14:23:01');\n</code></pre>\n<p>Skeletons can be combined, the main use being to print a full date and\ntime, e.g.</p>\n<pre><code>    new DateFormat.yMEd().add_jms().format(new DateTime.now());\n      ==&gt; 'Thu, 5/23/2013 10:21:47 AM'\n</code></pre>\n<p>Known limitations: Time zones are not yet supported. Dart\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/dart_core/DateTime.html\">DateTime</a> objects don't have a time zone, so are either\nlocal or UTC. Formatting and parsing Durations is not yet implemented.</p>\n<p>Note that before doing any DateTime formatting for a particular\nlocale, you must load the appropriate data by calling.</p>\n<pre><code>    import 'package:intl/date_symbol_data_local.dart';\n    ...\n    initializeDateFormatting(\"de_DE\", null).then(formatDates);\n</code></pre>\n<p>Once the future returned from the initialization call returns, the\nformatting data is available.</p>\n<p>There are other mechanisms for loading the date formatting data\nimplemented, but we expect to deprecate those in favor of having the\ndata in a library as in the above, and using deferred loading to only\nload the portions that are needed. For the time being, this will\ninclude all of the data, which will increase code size.</p>\n<h2>Bidirectional Text</h2>\n<p>The class <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html\">BidiFormatter</a> provides utilities for\nworking with Bidirectional text. We can wrap the string with unicode\ndirectional indicator characters or with an HTML span to indicate\ndirection. The direction can be specified with the\n<a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html#RTL\">RTL</a> and <a href=\"https://api.dartlang.org/docs/channels/stable/latest/intl/BidiFormatter.html#LTR\">LTR</a> constructors, or\ndetected from the text.</p>\n<pre><code>    new BidiFormatter.RTL().wrapWithUnicode('xyz');\n    new BidiFormatter.RTL().wrapWithSpan('xyz');\n</code></pre>"},{"name":"logging","qualifiedName":"logging/logging","preview":"<p>Support for logging.</p>","packageName":"logging","packageIntro":""},{"name":"matcher","qualifiedName":"matcher/matcher","preview":"<p>Support for specifying test expectations, such as for unit tests.</p>","packageName":"matcher","packageIntro":""},{"name":"matcher-mirror_matchers","qualifiedName":"matcher/matcher-mirror_matchers","preview":"<p>The mirror matchers library provides some additional matchers that\nmake use of <code>dart:mirrors</code>.</p>","packageName":"matcher","packageIntro":""},{"name":"mock","qualifiedName":"mock/mock","preview":"<p>A simple mocking/spy library.</p>","packageName":"mock","packageIntro":""},{"name":"path","qualifiedName":"path/path","preview":"<p>A comprehensive, cross-platform path manipulation library.</p>","packageName":"path","packageIntro":"<p>A comprehensive, cross-platform path manipulation library for Dart.</p>\n<p>The path package provides common operations for manipulating paths:\njoining, splitting, normalizing, etc.</p>\n<p>We've tried very hard to make this library do the \"right\" thing on whatever\nplatform you run it on, including in the browser. When you use the top-level\nfunctions, it will assume the current platform's path style and work with\nthat. If you want to explicitly work with paths of a specific style, you can\nconstruct a <code>path.Context</code> for that style.</p>\n<h2>Using</h2>\n<p>The path library was designed to be imported with a prefix, though you don't\nhave to if you don't want to:</p>\n<pre><code>import 'package:path/path.dart' as path;\n</code></pre>\n<p>The most common way to use the library is through the top-level functions.\nThese manipulate path strings based on your current working directory and\nthe path style (POSIX, Windows, or URLs) of the host platform. For example:</p>\n<pre><code>path.join(\"directory\", \"file.txt\");\n</code></pre>\n<p>This calls the top-level join function to join \"directory\" and\n\"file.txt\" using the current platform's directory separator.</p>\n<p>If you want to work with paths for a specific platform regardless of the\nunderlying platform that the program is running on, you can create a\nContext and give it an explicit Style:</p>\n<pre><code>var context = new path.Context(style: Style.windows);\ncontext.join(\"directory\", \"file.txt\");\n</code></pre>\n<p>This will join \"directory\" and \"file.txt\" using the Windows path separator,\neven when the program is run on a POSIX machine.</p>\n<h2>FAQ</h2>\n<h3>Where can I use this?</h3>\n<p>Pathos runs on the Dart VM and in the browser under both dart2js and Dartium.\nUnder dart2js, it currently returns \".\" as the current working directory, while\nunder Dartium it returns the current URL.</p>\n<h3>Why doesn't this make paths first-class objects?</h3>\n<p>When you have path <em>objects</em>, then every API that takes a path has to decide if\nit accepts strings, path objects, or both.</p><ul><li>\n<p>Accepting strings is the most convenient, but then it seems weird to have\nthese path objects that aren't actually accepted by anything that needs a\npath. Once you've created a path, you have to always call <code>.toString()</code> on\nit before you can do anything useful with it.</p></li><li>\n<p>Requiring objects forces users to wrap path strings in these objects, which\nis tedious. It also means coupling that API to whatever library defines this\npath class. If there are multiple \"path\" libraries that each define their\nown path types, then any library that works with paths has to pick which one\nit uses.</p></li><li>\n<p>Taking both means you can't type your API. That defeats the purpose of\nhaving a path type: why have a type if your APIs can't annotate that they\nexpect it?</p></li></ul>\n<p>Given that, we've decided this library should simply treat paths as strings.</p>\n<h3>How cross-platform is this?</h3>\n<p>We believe this library handles most of the corner cases of Windows paths\n(POSIX paths are generally pretty straightforward):</p><ul><li>\n<p>It understands that <em>both</em> \"/\" and \"\\\" are valid path separators, not just\n\"\\\".</p></li><li>\n<p>It can accurately tell if a path is absolute based on drive-letters or UNC\nprefix.</p></li><li>\n<p>It understands that \"/foo\" is not an absolute path on Windows.</p></li><li>\n<p>It knows that \"C:\\foo\\one.txt\" and \"c:/foo\\two.txt\" are two files in the\nsame directory.</p></li></ul>\n<h3>What is a \"path\" in the browser?</h3>\n<p>If you use this package in a browser, then it considers the \"platform\" to be\nthe browser itself and uses URL strings to represent \"browser paths\".</p>"},{"name":"stack_trace","qualifiedName":"stack_trace/stack_trace","preview":"<p>Stack trace generation and parsing.</p>","packageName":"stack_trace","packageIntro":"<p>This library provides the ability to parse, inspect, and manipulate stack traces\nproduced by the underlying Dart implementation. It also provides functions to\nproduce string representations of stack traces in a more readable format than\nthe native <a>dart-core</a> implementation.</p>\n<p><code>Trace</code>s can be parsed from native <a>dart-core</a>s using <code>Trace.from</code>, or captured\nusing <code>Trace.current</code>. Native <a>dart-core</a>s can also be directly converted to\nhuman-readable strings using <code>Trace.format</code>.</p>\n<p>Here's an example native stack trace from debugging this library:</p>\n<pre><code>#0      Object.noSuchMethod (dart:core-patch:1884:25)\n#1      Trace.terse.&lt;anonymous closure&gt; (file:///usr/local/google-old/home/goog/dart/dart/pkg/stack_trace/lib/src/trace.dart:47:21)\n#2      IterableMixinWorkaround.reduce (dart:collection:29:29)\n#3      List.reduce (dart:core-patch:1247:42)\n#4      Trace.terse (file:///usr/local/google-old/home/goog/dart/dart/pkg/stack_trace/lib/src/trace.dart:40:35)\n#5      format (file:///usr/local/google-old/home/goog/dart/dart/pkg/stack_trace/lib/stack_trace.dart:24:28)\n#6      main.&lt;anonymous closure&gt; (file:///usr/local/google-old/home/goog/dart/dart/test.dart:21:29)\n#7      _CatchErrorFuture._sendError (dart:async:525:24)\n#8      _FutureImpl._setErrorWithoutAsyncTrace (dart:async:393:26)\n#9      _FutureImpl._setError (dart:async:378:31)\n#10     _ThenFuture._sendValue (dart:async:490:16)\n#11     _FutureImpl._handleValue.&lt;anonymous closure&gt; (dart:async:349:28)\n#12     Timer.run.&lt;anonymous closure&gt; (dart:async:2402:21)\n#13     Timer.Timer.&lt;anonymous closure&gt; (dart:async-patch:15:15)\n</code></pre>\n<p>and its human-readable representation:</p>\n<pre><code>dart:core-patch                             Object.noSuchMethod\npkg/stack_trace/lib/src/trace.dart 47:21    Trace.terse.&lt;fn&gt;\ndart:collection                             IterableMixinWorkaround.reduce\ndart:core-patch                             List.reduce\npkg/stack_trace/lib/src/trace.dart 40:35    Trace.terse\npkg/stack_trace/lib/stack_trace.dart 24:28  format\ntest.dart 21:29                             main.&lt;fn&gt;\ndart:async                                  _CatchErrorFuture._sendError\ndart:async                                  _FutureImpl._setErrorWithoutAsyncTrace\ndart:async                                  _FutureImpl._setError\ndart:async                                  _ThenFuture._sendValue\ndart:async                                  _FutureImpl._handleValue.&lt;fn&gt;\ndart:async                                  Timer.run.&lt;fn&gt;\ndart:async-patch                            Timer.Timer.&lt;fn&gt;\n</code></pre>\n<p>You can further clean up the stack trace using <code>Trace.terse</code>. This folds\ntogether multiple stack frames from the Dart core libraries, so that only the\ncore library method that was directly called from user code is visible. For\nexample:</p>\n<pre><code>dart:core                                   Object.noSuchMethod\npkg/stack_trace/lib/src/trace.dart 47:21    Trace.terse.&lt;fn&gt;\ndart:core                                   List.reduce\npkg/stack_trace/lib/src/trace.dart 40:35    Trace.terse\npkg/stack_trace/lib/stack_trace.dart 24:28  format\ntest.dart 21:29                             main.&lt;fn&gt;\ndart:async                                  Timer.Timer.&lt;fn&gt;\n</code></pre>\n<h2>Stack Chains</h2>\n<p>This library also provides the ability to capture \"stack chains\" with the\n<code>Chain</code> class. When writing asynchronous code, a single stack trace isn't very\nuseful, since the call stack is unwound every time something async happens. A\nstack chain tracks stack traces through asynchronous calls, so that you can see\nthe full path from <code>main</code> down to the error.</p>\n<p>To use stack chains, just wrap the code that you want to track in\n<code>Chain.capture</code>. This will create a new <a href=\"https://api.dartlang.org/apidocs/channels/stable/#dart-async.Zone\">Zone</a> in which stack traces are\nrecorded and woven into chains every time an asynchronous call occurs. Zones are\nsticky, too, so any asynchronous operations started in the <code>Chain.capture</code>\ncallback will have their chains tracked, as will asynchronous operations they\nstart and so on.</p>\n<p>Here's an example of some code that doesn't capture its stack chains:</p>\n<pre class=\"dart\"><code>import 'dart:async';\n\nvoid main() {\n  scheduleAsync();\n}\n\nvoid scheduleAsync() {\n  return new Future.delayed(new Duration(seconds: 1))\n      .then((_) =&gt; runAsync());\n}\n\nvoid runAsync() {\n  throw 'oh no!';\n}\n</code></pre>\n<p>If we run this, it prints the following:</p>\n<pre><code>Uncaught Error: oh no!\nStack Trace: \n#0      runAsync (file:///usr/local/google-old/home/goog/dart/dart/test.dart:13:3)\n#1      scheduleAsync.&lt;anonymous closure&gt; (file:///usr/local/google-old/home/goog/dart/dart/test.dart:9:28)\n#2      _rootRunUnary (dart:async/zone.dart:717)\n#3      _RootZone.runUnary (dart:async/zone.dart:854)\n#4      _Future._propagateToListeners.handleValueCallback (dart:async/future_impl.dart:488)\n#5      _Future._propagateToListeners (dart:async/future_impl.dart:571)\n#6      _Future._complete (dart:async/future_impl.dart:317)\n#7      _SyncCompleter.complete (dart:async/future_impl.dart:44)\n#8      Future.Future.delayed.&lt;anonymous closure&gt; (dart:async/future.dart:219)\n#9      _createTimer.&lt;anonymous closure&gt; (dart:async-patch/timer_patch.dart:11)\n#10     _handleTimeout (dart:io/timer_impl.dart:292)\n#11     _RawReceivePortImpl._handleMessage (dart:isolate-patch/isolate_patch.dart:115)\n</code></pre>\n<p>Notice how there's no mention of <code>main</code> in that stack trace. All we know is that\nthe error was in <code>runAsync</code>; we don't know why <code>runAsync</code> was called.</p>\n<p>Now let's look at the same code with stack chains captured:</p>\n<pre class=\"dart\"><code>import 'dart:async';\n\nimport 'package:stack_trace/stack_trace.dart';\n\nvoid main() {\n  Chain.capture(() {\n    scheduleAsync();\n  });\n}\n\nvoid scheduleAsync() {\n  new Future.delayed(new Duration(seconds: 1))\n      .then((_) =&gt; runAsync());\n}\n\nvoid runAsync() {\n  throw 'oh no!';\n}\n</code></pre>\n<p>Now if we run it, it prints this:</p>\n<pre><code>Uncaught Error: oh no!\nStack Trace: \ntest.dart 17:3                                                runAsync\ntest.dart 13:28                                               scheduleAsync.&lt;fn&gt;\npackage:stack_trace/src/stack_zone_specification.dart 129:26  registerUnaryCallback.&lt;fn&gt;.&lt;fn&gt;\npackage:stack_trace/src/stack_zone_specification.dart 174:15  StackZoneSpecification._run\npackage:stack_trace/src/stack_zone_specification.dart 177:7   StackZoneSpecification._run\npackage:stack_trace/src/stack_zone_specification.dart 175:7   StackZoneSpecification._run\npackage:stack_trace/src/stack_zone_specification.dart 129:18  registerUnaryCallback.&lt;fn&gt;\ndart:async/zone.dart 717                                      _rootRunUnary\ndart:async/zone.dart 449                                      _ZoneDelegate.runUnary\ndart:async/zone.dart 654                                      _CustomizedZone.runUnary\ndart:async/future_impl.dart 488                               _Future._propagateToListeners.handleValueCallback\ndart:async/future_impl.dart 571                               _Future._propagateToListeners\ndart:async/future_impl.dart 317                               _Future._complete\ndart:async/future_impl.dart 44                                _SyncCompleter.complete\ndart:async/future.dart 219                                    Future.Future.delayed.&lt;fn&gt;\npackage:stack_trace/src/stack_zone_specification.dart 174:15  StackZoneSpecification._run\npackage:stack_trace/src/stack_zone_specification.dart 119:52  registerCallback.&lt;fn&gt;\ndart:async/zone.dart 706                                      _rootRun\ndart:async/zone.dart 440                                      _ZoneDelegate.run\ndart:async/zone.dart 650                                      _CustomizedZone.run\ndart:async/zone.dart 561                                      _BaseZone.runGuarded\ndart:async/zone.dart 586                                      _BaseZone.bindCallback.&lt;fn&gt;\npackage:stack_trace/src/stack_zone_specification.dart 174:15  StackZoneSpecification._run\npackage:stack_trace/src/stack_zone_specification.dart 119:52  registerCallback.&lt;fn&gt;\ndart:async/zone.dart 710                                      _rootRun\ndart:async/zone.dart 440                                      _ZoneDelegate.run\ndart:async/zone.dart 650                                      _CustomizedZone.run\ndart:async/zone.dart 561                                      _BaseZone.runGuarded\ndart:async/zone.dart 586                                      _BaseZone.bindCallback.&lt;fn&gt;\ndart:async-patch/timer_patch.dart 11                          _createTimer.&lt;fn&gt;\ndart:io/timer_impl.dart 292                                   _handleTimeout\ndart:isolate-patch/isolate_patch.dart 115                     _RawReceivePortImpl._handleMessage\n===== asynchronous gap ===========================\ndart:async/zone.dart 476                   _ZoneDelegate.registerUnaryCallback\ndart:async/zone.dart 666                   _CustomizedZone.registerUnaryCallback\ndart:async/future_impl.dart 164            _Future._Future._then\ndart:async/future_impl.dart 187            _Future.then\ntest.dart 13:12                            scheduleAsync\ntest.dart 7:18                             main.&lt;fn&gt;\ndart:async/zone.dart 710                   _rootRun\ndart:async/zone.dart 440                   _ZoneDelegate.run\ndart:async/zone.dart 650                   _CustomizedZone.run\ndart:async/zone.dart 944                   runZoned\npackage:stack_trace/src/chain.dart 93:20   Chain.capture\ntest.dart 6:16                             main\ndart:isolate-patch/isolate_patch.dart 216  _startIsolate.isolateStartHandler\ndart:isolate-patch/isolate_patch.dart 115  _RawReceivePortImpl._handleMessage\n</code></pre>\n<p>That's a lot of text! If you look closely, though, you can see that <code>main</code> is\nlisted in the first trace in the chain.</p>\n<p>Thankfully, you can call <code>Chain.terse</code> just like <code>Trace.terse</code> to get rid of all\nthe frames you don't care about. The terse version of the stack chain above is\nthis:</p>\n<pre><code>test.dart 17:3   runAsync\ntest.dart 13:28  scheduleAsync.&lt;fn&gt;\ndart:isolate     _RawReceivePortImpl._handleMessage\n===== asynchronous gap ===========================\ndart:async                                _Future.then\ntest.dart 13:12                           scheduleAsync\ntest.dart 7:18                            main.&lt;fn&gt;\npackage:stack_trace/src/chain.dart 93:20  Chain.capture\ntest.dart 6:16                            main\ndart:isolate                              _RawReceivePortImpl._handleMessage\n</code></pre>\n<p>That's a lot easier to understand!</p>\n<h3><code>Chain.track</code></h3>\n<p>For the most part <code>Chain.capture</code> will notice when an error is thrown and\nassociate the correct stack chain with it. However, there are some cases where\nexceptions won't be automatically detected: any <code>Future</code> constructor,\n<code>Completer.completeError</code>, <code>Stream.addError</code>, and libraries that use these such\nas <code>dart:io</code> and <code>dart:async</code>. For these, all you need to do is wrap the Future\nor Stream in a call to <code>Chain.track</code> and the errors will be tracked correctly.</p>"},{"name":"unittest-vm_config","qualifiedName":"unittest/unittest-vm_config","preview":"<p>A simple unit test library for running tests on the VM.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest-html_individual_config","qualifiedName":"unittest/unittest-html_individual_config","preview":"<p>A unit test library for running groups of tests in a browser, instead of the\nentire test file. This is especially used for large tests files that have\nmany subtests, so we can mark groups as failing at a finer granularity than\nthe entire test file.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest-matcher","qualifiedName":"unittest/unittest-matcher","preview":"<p><code>unittest.matcher</code> has been moved to the <code>matcher</code> package.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest-html_enhanced_config","qualifiedName":"unittest/unittest-html_enhanced_config","preview":"<p>A simple unit test library for running tests in a browser.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest-html_config","qualifiedName":"unittest/unittest-html_config","preview":"<p>A simple unit test library for running tests in a browser.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest","qualifiedName":"unittest/unittest","preview":"<p>Support for writing Dart unit tests.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest-compact_vm_config","qualifiedName":"unittest/unittest-compact_vm_config","preview":"<p>A test configuration that generates a compact 1-line progress bar. The bar\nis updated in-place before and after each test is executed. If all tests\npass, only a couple of lines are printed in the terminal. If a test fails,\nthe failure is shown and the progress bar continues to be updated below it.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest-mirror_matchers","qualifiedName":"unittest/unittest-mirror_matchers","preview":"<p><code>unittest.mirror_matchers</code> has been moved to the <code>matcher</code> package.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest-mock","qualifiedName":"unittest/unittest-mock","preview":"<p><code>unittest.mock</code> has been moved to the <code>matcher</code> package.</p>","packageName":"unittest","packageIntro":""},{"name":"unmodifiable_collection","qualifiedName":"unmodifiable_collection/unmodifiable_collection","preview":"<p>This library used to introduce unmodifiable wrappers for collections.</p>","packageName":"unmodifiable_collection","packageIntro":"<p><strong>Deprecated</strong></p>\n<p>This library used to introduce unmodifiable wrappers for collections.</p>\n<p>This functionality has been moved to the <code>collection</code> library.</p>\n<p>Please replace the import of this library with:</p>\n<pre><code>import \"package:collection/wrappers.dart\";\n</code></pre>\n<p>and change dependencies to match.</p>"},{"name":"dart-collection","qualifiedName":"dart-collection","preview":"<p>Classes and utilities that supplement the collection support in dart:core.</p>","packageName":""},{"name":"dart-math","qualifiedName":"dart-math","preview":"<p>Mathematical constants and functions, plus a random number generator.</p>","packageName":""},{"name":"dart-convert","qualifiedName":"dart-convert","preview":"<p>Encoders and decoders for converting between different data representations,\nincluding JSON and UTF-8.</p>","packageName":""},{"name":"dart-async","qualifiedName":"dart-async","preview":"<p>Support for asynchronous programming,\nwith classes such as Future and Stream.</p>","packageName":""},{"name":"dart-isolate","qualifiedName":"dart-isolate","preview":"<p>Concurrent programming using <em>isolates</em>:\nindependent workers that are similar to threads\nbut don't share memory,\ncommunicating only via messages.</p>","packageName":""},{"name":"dart-mirrors","qualifiedName":"dart-mirrors","preview":"<p>Basic reflection in Dart,\nwith support for introspection and dynamic evaluation.</p>","packageName":""},{"name":"dart-io","qualifiedName":"dart-io","preview":"<p>File, socket, HTTP, and other I/O support for server applications.</p>","packageName":""},{"name":"dart-typed_data","qualifiedName":"dart-typed_data","preview":"<p>Specialized integers and floating point numbers,\nwith SIMD support and efficient lists.</p>","packageName":""},{"name":"dart-dom-html","qualifiedName":"dart-dom-html","preview":"<p>HTML elements and other resources for web-based applications that need to\ninteract with the browser and the DOM (Document Object Model).</p>","packageName":""},{"name":"dart-dom-web_gl","qualifiedName":"dart-dom-web_gl","preview":"<p>3D programming in the browser.</p>","packageName":""},{"name":"dart-dom-indexed_db","qualifiedName":"dart-dom-indexed_db","preview":"<p>A client-side key-value store with support for indexes.</p>","packageName":""},{"name":"dart-dom-svg","qualifiedName":"dart-dom-svg","preview":"<p>Scalable Vector Graphics:\nTwo-dimensional vector graphics with support for events and animation.</p>","packageName":""},{"name":"dart-dom-web_audio","qualifiedName":"dart-dom-web_audio","preview":"<p>High-fidelity audio programming in the browser.</p>","packageName":""},{"name":"dart-dom-web_sql","qualifiedName":"dart-dom-web_sql","preview":"<p>An API for storing data in the browser that can be queried with SQL.</p>","packageName":""},{"name":"dart-js","qualifiedName":"dart-js","preview":"<p>Support for interoperating with JavaScript.</p>","packageName":""}],"introduction":"<p>Welcome to the Dart API reference documentation,\ncovering the official Dart API libraries.\nSome of the most fundamental Dart libraries include:</p><ul><li>\n<p><a href=\"#dart:core\">dart:core</a>:\n  Core functionality such as strings, numbers, collections, errors,\n  dates, and URIs.</p></li><li>\n<p><a href=\"#dart:html\">dart:html</a>:\n  DOM manipulation for web apps.</p></li><li>\n<p><a href=\"#dart:io\">dart:io</a>:\n  I/O for command-line apps.</p></li></ul>\n<p>Except for dart:core, you must import a library before you can use it.\nHere's an example of importing dart:html, dart:math, and a\nthird popular library called\n<a href=\"http://www.dartlang.org/polymer-dart/\">polymer.dart</a>:</p>\n<pre><code>import 'dart:html';\nimport 'dart:math';\nimport 'package:polymer/polymer.dart';\n</code></pre>\n<p>Polymer.dart is an example of a library that isn't\nincluded in the Dart download,\nbut is easy to get and update using the <em>pub package manager</em>.\nFor information on finding, using, and publishing libraries (and more)\nwith pub, see\n<a href=\"http://pub.dartlang.org\">pub.dartlang.org</a>.</p>\n<p>The main site for learning and using Dart is\n<a href=\"http://www.dartlang.org\">www.dartlang.org</a>.\nCheck out these pages:</p><ul><li><a href=\"http://www.dartlang.org\">Dart homepage</a></li><li><a href=\"http://www.dartlang.org/docs/tutorials/\">Tutorials</a></li><li><a href=\"http://www.dartlang.org/docs/\">Programmer's Guide</a></li><li><a href=\"http://www.dartlang.org/samples/\">Samples</a></li><li><a href=\"http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html\">A Tour of the Dart Libraries</a></li></ul>\n<p>This API reference is automatically generated from the source code in the\n<a href=\"https://code.google.com/p/dart/\">Dart project</a>.\nIf you'd like to contribute to this documentation, see\n<a href=\"https://code.google.com/p/dart/wiki/Contributing\">Contributing</a>\nand\n<a href=\"https://code.google.com/p/dart/wiki/WritingApiDocumentation\">Writing API Documentation</a>.</p>","filetype":"json","start-page":"quiver-log"}